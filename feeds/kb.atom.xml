<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>中国SaltStack用户组</title><link href="/" rel="alternate"></link><link href="/feeds/kb.atom.xml" rel="self"></link><id>/</id><updated>2014-12-17T00:00:00+08:00</updated><entry><title>基于Salt管理iptables防火墙规则</title><link href="/kb/managing-firewall-with-salt/" rel="alternate"></link><updated>2014-12-17T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:,2014-12-17:kb/managing-firewall-with-salt/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/managing-firewall-with-salt.html"&gt;http://pengyao.org/managing-firewall-with-salt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Salt 2014.7支持pillar merge功能, 尝试基于该功能, 进行统一的iptables防火墙的管理. 本文采用在iptables INPUT链中增加防火墙规则
(各个服务对应自己的自定义链),同时如果规则中有allow, 则表示该防火墙规则为白名单机制(只允许allow对应的主机访问, 其余均拒绝),
如果没有allow, 则判断是否存在deny, 如果存在, 则执行黑名单机制(只拒绝deny对应的主机, 其余均允许)&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OS: CentOS 6.5&lt;/li&gt;
&lt;li&gt;Salt架构: Master/Minions架构, 版本为2014.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于2014.7.0中iptables模块存在匹配Bug, 导致会不断进行重复配置, 当前develop分支已经修复这一问题(为修复这个问题的思路点赞), 需要进行对Minion进行如下操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 更新已修复匹配Bug的最新iptables模块&lt;/span&gt;
curl -so /usr/lib/python2.6/site-packages/salt/modules/iptables.py &lt;span class="se"&gt;\&lt;/span&gt;
https://raw.githubusercontent.com/saltstack/salt/develop/salt/modules/iptables.py
&lt;span class="c1"&gt;# 重启salt-minion&lt;/span&gt;
service salt-minion restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="section" id="pillar"&gt;
&lt;h3&gt;Pillar&lt;/h3&gt;
&lt;p&gt;/srv/pillar/sshd/init.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;firewall&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sshd_firewall&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;22&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deny&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8.8.8.8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/srv/pillar/httpd/init.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;firewall&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpd_firewall&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;allow&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/srv/pillar/top.sls&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sshd&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取pillar信息:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; pillar.item firewall --output&lt;span class="o"&gt;=&lt;/span&gt;yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;minion-01.example.com&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;firewall&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpd_firewall&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;allow&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sshd_firewall&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;deny&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;8.8.8.8&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="state"&gt;
&lt;h3&gt;State&lt;/h3&gt;
&lt;p&gt;/srv/salt/iptables/init.sls:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for eachfw, fw_rule in pillar['firewall'].iteritems() %}
# Add custom chain
{{ eachfw }}-chain:
  iptables.chain_present:
    - save: True

# Custom chain rules
{% if 'allow' in fw_rule %}
# White Lists
{% for each_allow in fw_rule['allow'] %}
{{ eachfw }}_allow_{{ each_allow }}:
  iptables.insert:
    - table: filter
    - chain: {{ eachfw }}-chain
    - position: 1
    - source: {{ each_allow }}
    - jump: ACCEPT
    - require:
      - iptables: {{ eachfw }}-chain
    - require_in:
      - iptables: {{ eachfw }}_deny
    - save: True
{% endfor %}
# Deny all
{{ eachfw }}_deny:
  iptables.append:
    - table: filter
    - chain: {{ eachfw }}-chain
    - jump: DROP
    - save: True

{% elif 'deny' in fw_rule %}
# Black Lists
{% for each_deny in fw_rule['deny'] %}
{{ eachfw }}_deny_{{ each_deny }}:
  iptables.insert:
    - table: filter
    - chain: {{ eachfw }}-chain
    - position: 1
    - source: {{ each_deny }}
    - jump: DROP
    - require:
      - iptables: {{ eachfw }}-chain
    - require_in:
      - iptables: {{ eachfw }}_allow
    - save: True
{% endfor %}
# Accept all
{{ eachfw }}_allow:
  iptables.append:
    - table: filter
    - chain: {{ eachfw }}-chain
    - jump: ACCEPT
    - save: True
{% endif %}

# Export traffic to custom chain
{{ eachfw }}-main:
  iptables.insert:
    - table: filter
    - chain: INPUT
    - position: 1
    - proto: tcp
    - dport: {{ fw_rule['port'] }}
    - jump: {{ eachfw }}-chain
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;应用iptables配置管理:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; state.sls iptables
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果输出如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
minion-01.example.com:
----------
          ID: sshd_firewall-chain
    Function: iptables.chain_present
      Result: True
     Comment: iptables sshd_firewall-chain chain is already exist in filter table for ipv4
     Started: 07:58:23.325688
    Duration: 6.976 ms
     Changes:
----------
          ID: sshd_firewall_deny_192.168.0.0/24
    Function: iptables.insert
      Result: True
     Comment: iptables rule for sshd_firewall_deny_192.168.0.0/24 already set for ipv4 (--source 192.168.0.0/24 --jump DROP)
              Saved iptables rule for sshd_firewall_deny_192.168.0.0/24 to: --source 192.168.0.0/24 --jump DROP for ipv4
     Started: 07:58:23.333635
    Duration: 46.198 ms
     Changes:
----------
          ID: sshd_firewall_deny_8.8.8.8
    Function: iptables.insert
      Result: True
     Comment: iptables rule for sshd_firewall_deny_8.8.8.8 already set for ipv4 (--source 8.8.8.8 --jump DROP)
              Saved iptables rule for sshd_firewall_deny_8.8.8.8 to: --source 8.8.8.8 --jump DROP for ipv4
     Started: 07:58:23.380231
    Duration: 47.926 ms
     Changes:
----------
          ID: sshd_firewall_allow
    Function: iptables.append
      Result: True
     Comment: iptables rule for sshd_firewall_allow already set (/sbin/iptables -t filter -A sshd_firewall-chain  --jump ACCEPT) for ipv4
              Saved iptables rule for sshd_firewall_allow to: /sbin/iptables -t filter -A sshd_firewall-chain  --jump ACCEPT for ipv4
     Started: 07:58:23.430386
    Duration: 50.731 ms
     Changes:
----------
          ID: sshd_firewall-main
    Function: iptables.insert
      Result: True
     Comment: iptables rule for sshd_firewall-main already set for ipv4 (-p tcp --dport 22 --jump sshd_firewall-chain)
     Started: 07:58:23.481324
    Duration: 38.941 ms
     Changes:
----------
          ID: httpd_firewall-chain
    Function: iptables.chain_present
      Result: True
     Comment: iptables httpd_firewall-chain chain is already exist in filter table for ipv4
     Started: 07:58:23.520640
    Duration: 9.483 ms
     Changes:
----------
          ID: httpd_firewall_allow_127.0.0.1
    Function: iptables.insert
      Result: True
     Comment: iptables rule for httpd_firewall_allow_127.0.0.1 already set for ipv4 (--source 127.0.0.1 --jump ACCEPT)
              Saved iptables rule for httpd_firewall_allow_127.0.0.1 to: --source 127.0.0.1 --jump ACCEPT for ipv4
     Started: 07:58:23.530949
    Duration: 48.088 ms
     Changes:
----------
          ID: httpd_firewall_allow_192.168.0.0/24
    Function: iptables.insert
      Result: True
     Comment: iptables rule for httpd_firewall_allow_192.168.0.0/24 already set for ipv4 (--source 192.168.0.0/24 --jump ACCEPT)
              Saved iptables rule for httpd_firewall_allow_192.168.0.0/24 to: --source 192.168.0.0/24 --jump ACCEPT for ipv4
     Started: 07:58:23.579515
    Duration: 50.945 ms
     Changes:
----------
          ID: httpd_firewall_deny
    Function: iptables.append
      Result: True
     Comment: iptables rule for httpd_firewall_deny already set (/sbin/iptables -t filter -A httpd_firewall-chain  --jump DROP) for ipv4
              Saved iptables rule for httpd_firewall_deny to: /sbin/iptables -t filter -A httpd_firewall-chain  --jump DROP for ipv4
     Started: 07:58:23.631684
    Duration: 50.886 ms
     Changes:
----------
          ID: httpd_firewall-main
    Function: iptables.insert
      Result: True
     Comment: iptables rule for httpd_firewall-main already set for ipv4 (-p tcp --dport 80 --jump httpd_firewall-chain)
     Started: 07:58:23.682788
    Duration: 44.153 ms
     Changes:

Summary
-------------
Succeeded: 10
Failed:     0
-------------
Total states run:     10
&lt;/pre&gt;
&lt;p&gt;检查minion端iptables规则&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; cmd.run &lt;span class="s1"&gt;&amp;#39;iptables-save&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
minion-01.example.com:
    # Generated by iptables-save v1.4.7 on Wed Dec 17 08:01:51 2014
    *filter
    :INPUT ACCEPT [65:13902]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [79:24034]
    :httpd_firewall-chain - [0:0]
    :sshd_firewall-chain - [0:0]
    -A INPUT -p tcp -m tcp --dport 80 -j httpd_firewall-chain
    -A INPUT -p tcp -m tcp --dport 22 -j sshd_firewall-chain
    -A httpd_firewall-chain -s 192.168.0.0/24 -j ACCEPT
    -A httpd_firewall-chain -s 127.0.0.1/32 -j ACCEPT
    -A httpd_firewall-chain -j DROP
    -A sshd_firewall-chain -s 8.8.8.8/32 -j DROP
    -A sshd_firewall-chain -s 192.168.0.0/24 -j DROP
    -A sshd_firewall-chain -j ACCEPT
    COMMIT
    # Completed on Wed Dec 17 08:01:51 2014
&lt;/pre&gt;
&lt;p&gt;达到预期&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>Salt Master外部Job Cache配置</title><link href="/kb/saltstack-master-external-job-cache-01/" rel="alternate"></link><updated>2014-11-24T00:00:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-11-24:kb/saltstack-master-external-job-cache-01/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://pengyao.org/saltstack-master-external-job-cache.html"&gt;http://pengyao.org/saltstack-master-external-job-cache.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SaltStack 2014.7之前, Minion端的执行结果想存储在外部系统中,
需要借助returner进行配置.
而returner的工作方式是由minion端直接连接对应的returner,
在分布式环境中由于网络等限制,该方式并不友好.&lt;/p&gt;
&lt;p&gt;而在Master端, Job Cache会以文件的形式存储在Master本地磁盘,
对第三方系统并不友好. 基于此, 之前有分享过 &lt;a href="http://pengyao.org/saltstack_master_retuner_over_event_system.html"&gt;基于Salt
Event系统构建Master端returner&lt;/a&gt;
, 需要启动另外一个进程, 进行监听Salt Event接口,
并将结果存储在第三方系统中. 刚好看到2014.7.0中master端增加了
master_job_cache参数, 可以直接外放Job Cache, 就做个测试,
测试下这个功能.&lt;/p&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Salt Version: &lt;em&gt;2014.7.0&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;OS: CentOS 6.5 X86_64 (with EPEL)&lt;/li&gt;
&lt;li&gt;本次测试结果将存储在MySQL中, 为了方便测试, 已在Master本地部署了MySQL
    Server&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;h3&gt;前置配置&lt;/h3&gt;
&lt;p&gt;安装MySQLdb依赖:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum -y install MySQL-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置本次测试需要使用的数据库及用户:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 创建salt数据库
mysql -e &amp;#39;create database salt&amp;#39;
# 创建用于连接salt数据库的用户
mysql -e &amp;#39;&amp;quot;grant all on salt.* to salt@localhost identified by &amp;quot;salt_pass&amp;#39;;
# 将数据库配置添加至master配置文件中
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建用于存储Job的数据库表结构:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;USE `salt`;

--
-- Table structure for table `jids`
--

DROP TABLE IF EXISTS `jids`;
CREATE TABLE `jids` (
  `jid` varchar(255) NOT NULL,
  `load` mediumtext NOT NULL,
  UNIQUE KEY `jid` (`jid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `salt_returns`
--

DROP TABLE IF EXISTS `salt_returns`;
CREATE TABLE `salt_returns` (
  `fun` varchar(50) NOT NULL,
  `jid` varchar(255) NOT NULL,
  `return` mediumtext NOT NULL,
  `id` varchar(255) NOT NULL,
  `success` varchar(10) NOT NULL,
  `full_ret` mediumtext NOT NULL,
  `alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  KEY `id` (`id`),
  KEY `jid` (`jid`),
  KEY `fun` (`fun`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置Master&lt;/h3&gt;
&lt;p&gt;将MySQL连接权限等信息添加到Salt Master配置文件中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -e &amp;quot;\n\n# MySQL\nmysql.host: &amp;#39;localhost&amp;#39;\nmysql.user: &amp;#39;salt&amp;#39;\nmysql.pass: &amp;#39;salt_pass&amp;#39;\nmysql.db: &amp;#39;salt&amp;#39;\nmysql.port: 3306&amp;quot; &amp;gt;&amp;gt; /etc/salt/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置master_job_cache选项, 以使将Job结果存储在MySQL中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -e &amp;quot;\n\n# Master Job Cache\nmaster_job_cache: mysql&amp;quot; &amp;gt;&amp;gt; /etc/salt/master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启Salt Master, 以使配置生效:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service salt-master restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;对主机执行test.ping:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;*&amp;#39; test.ping -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Executing job with jid 20141120060202308159&lt;/span&gt;
&lt;span class="gh"&gt;-------------------------------------------&lt;/span&gt;

minion-01.example.com:
    True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查询MySQL jids表数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql salt -e &amp;#39;select * from jids\G&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*************************** 1. row ***************************
jid: 20141120060202308159
load: {&amp;quot;tgt_type&amp;quot;: &amp;quot;glob&amp;quot;, &amp;quot;jid&amp;quot;: &amp;quot;20141120060202308159&amp;quot;, &amp;quot;cmd&amp;quot;: &amp;quot;publish&amp;quot;, &amp;quot;tgt&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;kwargs&amp;quot;: {&amp;quot;show_timeout&amp;quot;: false, &amp;quot;show_jid&amp;quot;: false}, &amp;quot;ret&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;user&amp;quot;: &amp;quot;sudo_vagrant&amp;quot;, &amp;quot;arg&amp;quot;: [], &amp;quot;fun&amp;quot;: &amp;quot;test.ping&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查询MySQL salt_returns表数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql salt -e &amp;#39;select * from salt_returns\G&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*************************** 1. row ***************************
fun: test.ping
jid: 20141120060202308159
return: true
id: minion-01.example.com
success: 1
full_ret: {&amp;quot;fun_args&amp;quot;: [], &amp;quot;jid&amp;quot;: &amp;quot;20141120060202308159&amp;quot;, &amp;quot;return&amp;quot;: true, &amp;quot;retcode&amp;quot;: 0, &amp;quot;success&amp;quot;: true, &amp;quot;cmd&amp;quot;: &amp;quot;_return&amp;quot;, &amp;quot;_stamp&amp;quot;: &amp;quot;2014-11-20T06:02:02.533850&amp;quot;, &amp;quot;fun&amp;quot;: &amp;quot;test.ping&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;minion-01.example.com&amp;quot;}
alter_time: 2014-11-20 06:02:02
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Job执行结果已经按照之前的配置存储到了MySQL中, 达到预期效果&lt;/p&gt;</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>Salt新通信架构—RAET</title><link href="/kb/salt-raet-01/" rel="alternate"></link><updated>2014-07-10T14:10:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-07-10:kb/salt-raet-01/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处:
    &lt;a href="http://devopstarter.info/-fan-yi-salt-xin-tong-xin-jia-gou-salt-raet/"&gt;http://devopstarter.info/-fan-yi-salt-xin-tong-xin-jia-gou-salt-raet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;E文原文: &lt;a href="https://github.com/saltstack/raet"&gt;https://github.com/saltstack/raet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者: &lt;a href="http://devopstarter.info/"&gt;Colstuwjx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;译者注:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Saltstack官方在salt 2014 介绍视频中引入了salt raet概念，salt
raet是继Salt-Zeromq, Salt-Ssh之后的第三套通信体系，全名为Reliable
Asynchronous Event Transport,即基于事件的可靠异步传输协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;为什么要研发Salt Raet?&lt;/h2&gt;
&lt;p&gt;现代大规模的分布式应用架构，其组件均是分布在互联网上的多个主机和多个CPU内核，往往是基于一个消息或事件总线，允许不同的分布式组件之间相互异步通信。通常情况下，消息总线是某种形式的消息队列服务，如AMQP或ZeroMQ。消息总线支持通常被称为发布\订阅模式的信息交互方式。&lt;/p&gt;
&lt;p&gt;一个具备完整功能的消息队列服务拥有很多的优点，然而，其存在的缺陷之一便是大规模应用环境下的性能问题。&lt;/p&gt;
&lt;p&gt;一个消息队列服务完成两个独立而互补的功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个是在互联网上消息的异步传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;第二个是消息队列的管理，这便是通过队列实现的诸如消息的识别、跟踪、存储，以及发布者和订阅者相互之间的消息分发。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于众多应用程序而言，一个消息队列服务的优势之一便是通过API能很好的隐藏服务背后的细节，也就是其来自各个客户端的消息队列管理的复杂性。&lt;/p&gt;
&lt;p&gt;但是，消息队列服务存在的主要缺陷便是大规模应用环境下的扩展性，其消息的容量、消息的定时以及内存、网络和CPU处理能力相关的需求往往成为关键，而客户端对于服务性能的调整往往显得无能为力。MQ服务在分布式的应用环境下通常会成为瓶颈所在，而更复杂的MQ服务，如AMQP，则会在高负载下变得不可靠。&lt;/p&gt;
&lt;p&gt;异步事件的网络传输和消息队列管理之间功能的分离使得每个功能模块可以独立的调整各自大规模环境下的性能。&lt;/p&gt;
&lt;p&gt;绝大部分的MQ服务是基于TCP/IP网络传输协议。TCP/IP对于网络通信有显著的延迟效应，因而不太适合用于分布式事件驱动式应用程序交互的异步特性。这其中主要的原因便是在于TCP/IP为了支持流传输针对连接的建立和连接的关闭以及失败连接的处理。从根本上来说，TCP/IP是基于大规模的连续数据流作出了诸多优化，而不太适用于大量小规模异步事件或消息的传输。其在小规模应用系统下不成问题，而一旦达到一定规模，相关的通信特征的差异问题将会凸显。&lt;/p&gt;
&lt;p&gt;UDP/IP
低延迟和无连接的特性注定它更适用于许多小规模异步消息的传输。UDP/IP本身的缺点在于它是不可靠的传输协议。&lt;/p&gt;
&lt;p&gt;这里所需要的便是一个适配的针对UDP/IP协议增添可靠性而同时无损其低延迟及扩展性的传输协议。&lt;/p&gt;
&lt;p&gt;一个事务型协议，比流协议更适用于为异步事件提供可靠传输。&lt;/p&gt;
&lt;p&gt;进一步来说，由于大部分的MQ服务是基于TCP/IP协议，他们也更倾向于使用HTTP或者保证安全通信的TLS/SSL。虽然使用HTTP能够轻松的提供基于Web的集成系统，但是长远来说它也会成为高性能系统的瓶颈所在，TLS对于一个安全系统而言，其性能和漏洞两方面也同样存在问题。&lt;/p&gt;
&lt;p&gt;椭圆曲线加密，另一方面来说，在相对于其他实现方法更低的性能需求的前提下增强了系统的安全性。LibSodium提供了一个开源的椭圆曲线加密库，用于验证和加密支持。CurveCP协议基于LibSodium提供了一个引导安全网络信息交互的握手协议。&lt;/p&gt;
&lt;p&gt;最后，在分布式并发事件驱动的应用环境下管理和协调处理器资源（CPU、内存、网络）的一个最佳途径便是使用一种称为微线程的东西。一个微线程应该说是一个程序语言级的特性，它在不比函数调用消耗更多资源的情况下实现了代码逻辑上的并发。&lt;/p&gt;
&lt;p&gt;微线程使用协同工作的多任务处理来取代线程和/或进程，其避免了许多诸如资源竞争，上下文切换，和进程间通信的复杂性，同时提供了更高的性能。&lt;/p&gt;
&lt;p&gt;由于所有协同工作的微线程均运行于一个进程，也就造成一个简单的微线程应用的资源调用被限制在一个CPU核心。为了使得所有的CPU核心均得到充分的利用，应用程序需要能够为每个CPU核心运行至少一个进程。这就需要同一台主机的进程间通信。但是不同于传统的多进程处理方式，即一个进程完成一个逻辑并发的功能，一个基于微线程的多进程程序不再使用一个微线程处理一个逻辑并发功能的模式，而微线程的总数是取决于总的进程的最小数目的限制，并且其不超过CPU的核心数量。这将优化CPU的处理能力，同时最大限度地减少进程上下文切换的开销。&lt;/p&gt;
&lt;p&gt;一个使用这样的微线程-多进程架构平台的典型例子便是Erlang。事实上，Erlang模式的成功为RAET方案的可行性提供了强有力的支持。
进一步来说，一个潜在的问题可能是：我们为什么不使用Erlang呢？
很不幸的是，Erlang生态系统跟Python相比较而言有些时候显得有些局限性，而它本身则使用了一种不太友好的语法结构。RAET的设计实现目标之一便是充分集成现有的Python生态系统丰富的类库和知识集，同时又能够方便的开发一个基于微线程-多进程架构模型的分布式应用程序。我们的终极目标便是想两全其美。&lt;/p&gt;
&lt;p&gt;RAET设计用于借助微线程-多进程应用框架提供在互联网上安全可靠的、可扩展的异步消息\事件传输，其使用UDP协议来完成主机间的通信，LibSodium来完成认证、加密，CurveCP握手协议来达成安全引导。&lt;/p&gt;
&lt;p&gt;相应的队列管理和微线程应用程序的支持由Ioflo提供。RAET可以算作是Ioflo的一个互补项目，它使得多个Ioflo程序可以通过网络结合在一起，作为一个分布式程序的一部分协同工作。&lt;/p&gt;
&lt;p&gt;导致开发RAET的一个主要驱动因素便是使得Saltstack具备更好的扩展性的需求。Saltstack是一个使用Python编写的远程执行和配置管理平台。Saltstack使用Zeromq作为它的消息总线或者说消息队列服务。Zeromq是基于TCP/IP传输协议实现的，因而也存在上述相应的TCP/IP基础架构下的延迟及非同步性问题。此外，因为Zeromq是通过一个特殊的“套接字”将队列管理和传输集成在一起，其大规模应用环境下的队列的独立传输性能也成为问题所在，甚至于跟踪Bug也存在一定的困难。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;当前的RAET提供Pypi安装方式，在类Unix系统下通过pip指定如下命令来完成安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install raet
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;当前的Raet支持两种通信方式：&lt;/p&gt;
&lt;p&gt;主机间通过UDP\IP协议套接字通信;&lt;/p&gt;
&lt;p&gt;通过Unix域（UXD）套接字实现的同一主机进程间通信。&lt;/p&gt;
&lt;p&gt;一个基于Raet的应用程序架构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://github.com/saltstack/raet/raw/master/docs/images/RaetMetaphor.png" /&gt;&lt;/p&gt;
&lt;h2&gt;组件的隐喻命名&lt;/h2&gt;
&lt;p&gt;下列组件的形象命名仅仅是为了保持一致性而设计，与Ioflo并不冲突。&lt;/p&gt;
&lt;h3&gt;Road，Estates，Main Estate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UPD通道便是一个“Road”;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;一个Road的成员便是“Estates”（就像现实中房屋前方的道路）;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;每个Estate拥有一个唯一的UDP主机端口地址“ha”，一个唯一的字符串“name”和一个唯一的数字ID“eid”;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;一个Road上的Estate便称为Main Estate;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;Main
    Estate允许其他Estates通过Join方法（key交换）加入到Road上并且允许（CurveCP）相互之间的信息交易;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;Main Estate同样负责担任其他Estates的消息路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lane，Yards，Main Yard&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个Estate都可以是一个“Lane”，这便是一个UXD通道;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;一个Lane的成员便是“Yard”（简单来说便是一个Estate的细分点）;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;一个Lane的每个Yard成员都有一个唯一的UXD文件名称、主机地址‘ha’和一个唯一的字符串“name”。这个类通常也有一个Yard的数字ID“yid”用于生成Yard
    name但是它不是Yard实例的属性之一;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;Lane name和Yard
    name结合起来便可以形成一个唯一的文件名，它是UXD的主机地址‘ha’;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;一个Lane上的Yard便是一个Main Yard;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;Main
    Yard负责形成Lane并且允许其他Yards加入到该lane;在此之前这还没有一个正式的处理过程。当前这会设置一个由Main
    yard维护的标志，其将会把任何事先未在Yards列表里的Yard发送过来的数据包Drop掉。另外，文件权限的设置可以用来阻止伪Yards与Main
    Yard交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;Main Yard还负责其他Lane上的Yards之间的消息路由。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;运行IoFlo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个Estate UDP接口运行于一个在单个IoFlo
    House上下文中工作的RoadStack（UDP套接字）（因此可以把运行UDP
    Stack的House看作是Estate组成的庄园别墅）;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;每个Yard UXD接口运行于一个在单个IoFlo House上下文中工作的
    LaneStack（Unix域套接字）（因此可以把运行UXD
    Stack的House看作是Estate的附属Houses、Tents或Shacks）;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;“庄园”House的特殊之处在于其可以运行在针对Estate的UDP Stack和针对Main
    Yard的UXD Stack两套环境下;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;运行Main Estate UDP Stack的House可以被认为是Mayor’s House;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;ul&gt;
&lt;li&gt;在上下文中，一个House便是一个数据存储。共享的数据存储可以被以一个点号分隔路径的唯一共享名称定位。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;路由&lt;/h2&gt;
&lt;p&gt;鉴于上面所描述的Ioflo运行架构，其依照如下方式完成路由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了定位一个特定的Estate，Estate name需要相应的指定;&lt;/li&gt;
&lt;li&gt;为了定位一个Estate下的特定Yard，Yard name需要相应的指定;&lt;/li&gt;
&lt;li&gt;为了定位一个House下的特定Queue，Share name需要相应的指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，路由是从：在一个源Share、源Yard或是一个源Estate中的队列定义好的一个源节点到：一个源Share、源Yard或是一个源Estate中的队列定义好的目的节点。&lt;/p&gt;
&lt;p&gt;这里需要两个三选一的节点，一个是源节点，另一个则是目标节点&lt;/p&gt;
&lt;p&gt;源节点（Estate name，Yard name，Share name）。&lt;/p&gt;
&lt;p&gt;目标节点（Estate name，Yard name，Share name）。&lt;/p&gt;
&lt;p&gt;如果三合一中的任一元素均是None或者空，那么便会使用默认参数值。如下便是一个路由本身信息的消息正文样例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;estate = &amp;#39;minion1&amp;#39;
stack0 = stacking.StackUxd(name=&amp;#39;lord&amp;#39;, lanename=&amp;#39;cherry&amp;#39;, yid=0)
stack1 = stacking.StackUxd(name=&amp;#39;serf&amp;#39;, lanename=&amp;#39;cherry&amp;#39;, yid=1)
yard = yarding.Yard( name=stack0.yard.name, prefix=&amp;#39;cherry&amp;#39;)
stack1.addRemoteYard(yard)

src = (estate, stack1.yard.name, None)
dst = (estate, stack0.yard.name, None)
route = odict(src=src, dst=dst)
msg = odict(route=route, stuff=&amp;quot;Serf to my lord. Feed me!&amp;quot;)
stack1.transmit(msg=msg)

timer = Timer(duration=0.5)
timer.restart()
while not timer.expired:
    stack0.serviceAll()
    stack1.serviceAll()


lord Received Message
{
    &amp;#39;route&amp;#39;:
    {
        &amp;#39;src&amp;#39;: [&amp;#39;minion1&amp;#39;, &amp;#39;yard1&amp;#39;, None],
        &amp;#39;dst&amp;#39;: [&amp;#39;minion1&amp;#39;, &amp;#39;yard0&amp;#39;, None]
    },
    &amp;#39;stuff&amp;#39;: &amp;#39;Serf to my lord. Feed me!&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;UDP/IP Raet协议的具体细节&lt;/h2&gt;
&lt;p&gt;UDP Raet协议便是基于一个预编码的隐喻命名约定，换句话说，就是estates
关联到一个Road。核心的对象便是由如下包提供：raet.road&lt;/p&gt;
&lt;h3&gt;Road Raet 生产环境UDP/IP端口&lt;/h3&gt;
&lt;p&gt;Manor Estate端口为4505，而其他Estates端口为4510&lt;/p&gt;
&lt;h3&gt;数据包格式&lt;/h3&gt;
&lt;p&gt;Raet使用一个带有数个字段的排序好的字典数据来初始化一个数据包的数据，而其实大多数的字段都共享在下面头部数据格式，因此仅仅有少量唯一的字段会显示在这里。&lt;/p&gt;
&lt;h3&gt;唯一的数据包字段&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh: 源主机IP地址 (ipv4)
sp: 源主机IP端口
dh: 目的主机IP地址(ipv4)
dp: 目的主机IP端口
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;数据包的包头格式&lt;/h3&gt;
&lt;p&gt;数据包头部的data部分是一个排序好的字典数据，其常常用于创建一个准备传送的数据包或是收取一个数据包的相应字段。什么字段应该被包含到数据包头依赖于数据包头的类型。&lt;/p&gt;
&lt;h3&gt;Header的编码&lt;/h3&gt;
&lt;p&gt;当前Raet支持三种类型的头部编码格式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RAET 本地格式。
    这便是一个在可读性和大小方面做过权衡和优化的精简的ASCII文本格式。该模式作为RAET通信的默认选项。

JSON 数据格式。
    这是一个最可视化的格式而且具备一些兼容性上的优势。

二进制 数据格式。
    这个方案在当前还没能完全实现。一旦协议达到一个更成熟的阶段并且保证没有任何的头部变化（或者只是少量），那么我们将会提供一个精简后的二进制数据格式。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当头部的类型为json = 0时，某些优化措施将会用于精简头部的长度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;头部的字段key为两字节（bytes）长。
如果一个头部的字段值为其默认值，那么它的字段将不包括那些编码为十六进制的字符串值。
标志位在字段‘fg’中编码为双字符的十六进制字符串。
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;包头的数据字段&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;raet&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RAET&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;vn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Packet&lt;/span&gt; &lt;span class="n"&gt;Kind&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PcktKind&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Packet&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PcktLen&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HeadKind&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;hl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HeadLen&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;se&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt; &lt;span class="n"&gt;Estate&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SEID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;de&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Destination&lt;/span&gt; &lt;span class="n"&gt;Estate&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Correspondent&lt;/span&gt; &lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CrdtFlag&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BroadCast&lt;/span&gt; &lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BcstFlag&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;ti&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Transaction&lt;/span&gt; &lt;span class="n"&gt;Kind&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TrnsKind&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Datetime&lt;/span&gt; &lt;span class="n"&gt;Stamp&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Datetime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;oi&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OrdrIndx&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Waiting&lt;/span&gt; &lt;span class="n"&gt;Ack&lt;/span&gt; &lt;span class="n"&gt;Flag&lt;/span&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WaitFlag&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;segment&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;ordered&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;waiting&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ack&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;
&lt;span class="n"&gt;ml&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MsgLen&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unsegmented&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Segment&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SgmtNum&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Segment&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SgmtCnt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Segment&lt;/span&gt; &lt;span class="n"&gt;Flag&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SgmtFlag&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;segmented&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllFlag&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;Resend&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;segments&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;

&lt;span class="n"&gt;bk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BodyKind&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;ck&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Coat&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CoatKind&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;fk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Footer&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;   &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FootKind&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;fl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Footer&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FootLen&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;  &lt;span class="n"&gt;packed&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Flags&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;00&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;hs&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="n"&gt;Hex&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;af&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sf&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Zeros&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;TBD&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;正文的数据格式&lt;/h3&gt;
&lt;p&gt;正文的data部分是一个使用JSON或MSGPACK序列化好的映射。&lt;/p&gt;
&lt;h3&gt;数据包的组成成分&lt;/h3&gt;
&lt;p&gt;每个数据包有4个组成部分，而其中一些可能为空，它们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Head&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Coat&lt;/li&gt;
&lt;li&gt;Tail&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;头部是必要的部分，其提供数据包处理所需的各种头部字段。&lt;/p&gt;
&lt;p&gt;尾部提供用于识别数据包源的认证签名，从而表明它的内容没有被篡改过。&lt;/p&gt;
&lt;p&gt;正文部分是整个数据包的内容上下文，一些诸如ACKs和NACKs的数据包一般不需要正文部分。一般来说，正文是已经序列化并排序好的Python字典数据，正文中排序好的数据字段能够让解析和调试拥有一个一致的视图。&lt;/p&gt;
&lt;p&gt;表层部分是正文的加密版本，其加密类型是基于CurveCP实现的。如果一个数据包存在Coat部分，那么其正文将会被封装在数据包的表层。&lt;/p&gt;
&lt;h3&gt;包头的具体细节&lt;/h3&gt;
&lt;h4&gt;Json编码格式&lt;/h4&gt;
&lt;p&gt;包头是一个ASCII安全的JSON编码格式的有组织的Python字典。包头的末端是一个用以两对回车换行符开头的空行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/r/n/r/n
10 13 10 13
ADAD
1010 1101 1010 1101
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回车换行符及换行字符一般不能出现在JSON编码中，除非它们用反斜杠分隔开，因此在一个合法的JSON格式数据中不能出现4字节的组合，因为他们没有多字节的unicode字符使其成为一个唯一的数据包头终止符。&lt;/p&gt;
&lt;p&gt;这就意味着包头必须是ASCII安全编码以至于其不允许出现多字节的utf-8格式的字符串。&lt;/p&gt;
&lt;h4&gt;RAET本地编码格式&lt;/h4&gt;
&lt;p&gt;RAET本地编码格式的数据包头由换行分隔的数据行组成。而包头的每一行都包含一个两字符的字段标识符，紧接着是一个空格跟这个字段的ASCII十六进制编码的二进制数据，后面再跟一个换行符。包头的末尾用一个空行表示，换句话说，就是一对换行符。&lt;/p&gt;
&lt;h4&gt;二进制编码格式&lt;/h4&gt;
&lt;p&gt;其包头由一个预定义好的固定长度的字段集合组成。&lt;/p&gt;
&lt;h3&gt;会话&lt;/h3&gt;
&lt;p&gt;会话控制对于一个系统的安全性至关重要。Raet希望一个会话打开后，诸多的消息事务均在会话中完成。&lt;/p&gt;
&lt;p&gt;会话ID SID称为si&lt;/p&gt;
&lt;h3&gt;快速开启一个会话&lt;/h3&gt;
&lt;h2&gt;分层&lt;/h2&gt;
&lt;p&gt;OSI 层次模型&lt;/p&gt;
&lt;p&gt;7: 应用层: 格式: 数据 (应用接口数据缓冲栈等)&lt;/p&gt;
&lt;p&gt;6: 表示层: 格式: 数据 (加密-解密成独立的主机数据格式)&lt;/p&gt;
&lt;p&gt;5: 会话层: 格式: 数据 (主机间通信，身份验证，组)&lt;/p&gt;
&lt;p&gt;4: 传输层: 格式: 数据段 (消息的可靠传输, 事务, 分段, 错误检测)&lt;/p&gt;
&lt;p&gt;3: 网络层: 格式: 数据包/数据流 (定位和路由)&lt;/p&gt;
&lt;p&gt;2: 链路层: 格式: 数据帧 (保证每一帧的通信连接的可靠性，介质访问控制层）&lt;/p&gt;
&lt;p&gt;1: 物理层: 数据位 (通信连接的数据传输并不可靠)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据链路层对于Raet来说是透明的;&lt;/li&gt;
&lt;li&gt;网络层包含主机的IP地址和UDP端口信息;&lt;/li&gt;
&lt;li&gt;Raet在传输层通过事务、数据包认证和尾部签名的相互搭配提供了可靠的数据传输;&lt;/li&gt;
&lt;li&gt;会话层便是会话ID为完成签名而进行的密钥交互认证，分组便形成了Road;&lt;/li&gt;
&lt;li&gt;表示层完成对数据包正文的加密-解密及序列化-反序列化工作。&lt;/li&gt;
&lt;li&gt;应用层便是正文的数据字典。\
    数据包的签名和认证技术实现上来说可以在传输层或者会话层完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UXD消息&lt;/h2&gt;
&lt;p&gt;RAET UXD 消息（每个分段）被限制在与RAET
UDP消息同等尺寸大小（大概16Mb）。&lt;/p&gt;
&lt;p&gt;UXD消息可以有如下的数据包头格式并紧接着一个序列化好的消息正文字典，然而当前仅有JSON数据的格式得以实现。&lt;/p&gt;
&lt;p&gt;1) JSON 头部: “RAET\njson\n\n”
紧接着一个统一JSON格式的消息正文的数据字典;&lt;/p&gt;
&lt;p&gt;2) msgpack 头部:
“RAET\npack\n\n”紧接着一个统一的MSGPACK格式的消息正文的数据字典。&lt;/p&gt;</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>Salt中Pillar那点事</title><link href="/kb/salt-pillar-01/" rel="alternate"></link><updated>2014-06-08T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:,2014-06-08:kb/salt-pillar-01/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/salt-pillar-01.html"&gt;http://pengyao.org/salt-pillar-01.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基本简介&lt;/h2&gt;
&lt;p&gt;在 &lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 中, Pillar作为定义minion全局数据的接口. 默认存储在master端, Minion启动时会连接master获取最新的pillar数据. Pillar使用类似于State Tree的结构, 默认使用 &lt;cite&gt;YAML&lt;/cite&gt; 作为其描述格式, 在Minion内部最终转换成 &lt;a class="reference external" href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries"&gt;Python字典&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;那么在Salt内部, Pillar是如何工作的? 在哪些情况下,需要先执行刷新Pillar操作? 而哪些又不需要?&lt;/p&gt;
&lt;p&gt;本文基于 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/releases/2014.1.4.html"&gt;Salt 2014.1.4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar"&gt;
&lt;h2&gt;配置文件中的Pillar&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;pillar_roots&lt;/dt&gt;
&lt;dd&gt;存在于master/minion配置文件中. 指定Pillar roots对应环境的目录, 其布局类似于State Tree. 在minion配置文件中配置该选项, 只有当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时才生效.&lt;/dd&gt;
&lt;dt&gt;state_top&lt;/dt&gt;
&lt;dd&gt;存在于master/minion配置文件中, 默认值为top.sls. 官方描述为用于state system, 用于告诉minion使用哪个环境并且需要执行哪些模块. 其实该选项也应用在pillar system中, 作用和state system类似. 所以如果更改了本选项, pillar system对应的top.sls也需要变更. 在minion配置文件中配置该选项, 只有当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时才生效.&lt;/dd&gt;
&lt;dt&gt;file_client&lt;/dt&gt;
&lt;dd&gt;存在于minion配置文件中, 默认值为remote. 用于指定去哪里查找文件. 有效值是 &lt;em&gt;remote&lt;/em&gt; 和 &lt;em&gt;local&lt;/em&gt;. &lt;em&gt;remote&lt;/em&gt; 表示使用master, &lt;em&gt;local&lt;/em&gt; 用于 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/tutorials/quickstart.html#telling-salt-to-run-masterless"&gt;Masterless&lt;/a&gt; 的情况.&lt;/dd&gt;
&lt;dt&gt;pillar_opts&lt;/dt&gt;
&lt;dd&gt;存在于master配置文件中, 默认值为True. 指定是否将master配置选项作为pillar. 如果该选项为True, 修改了master配置选项时, 需要重启master, 才能在pillar中得到最新的值.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="minionpillar"&gt;
&lt;h2&gt;Minion中的Pillar实现&lt;/h2&gt;
&lt;p&gt;Minion中pillar为Python字典, Minion启动时, 默认会连接master获取最新的pillar数据, 存储在 &lt;em&gt;self.opts['pillar']&lt;/em&gt; 中. &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L520"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Minion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MinionBase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    This class instantiates a minion, runs connections for a minion,&lt;/span&gt;
&lt;span class="sd"&gt;    and loads all of the functions into the minion&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Pass in the options dict&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么 &lt;em&gt;salt.pillar.get_pillar&lt;/em&gt; 是如何工作的? &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/pillar/__init__.py#L28"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saltenv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Return the correct pillar driver based on the file_client option&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Boron&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Passing a salt environment should be done using &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;saltenv&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt; &amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;not &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;env&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;. This functionality will be removed in Salt Boron.&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Backwards compatibility&lt;/span&gt;
        &lt;span class="n"&gt;saltenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RemotePillar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pillar&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file_client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Pillar&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saltenv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以从代码中获知, 会从opts中获取 &lt;em&gt;file_client&lt;/em&gt; 值, 如果是remote, 则对应的对象为RemotePillar, 如果是local, 则为Pillar, 进行后续处理&lt;/p&gt;
&lt;p&gt;如果Minion在运行过程中, 接受到的指令以 &lt;em&gt;refresh_pillar&lt;/em&gt; 字符串开头, 则执行 &lt;em&gt;pillar_refresh&lt;/em&gt; 操作. &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L1376"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么 &lt;em&gt;pillar_refresh()&lt;/em&gt; 都进行了哪些工作? &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L1090"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Refresh the pillar&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从代码中得知, pillar_refresh操作, 除了从Master端/Minion本地获取最新的pillar信息外, 也会执行模块刷新(module_refresh)工作. 可以将minion本地的日志级别调整为 &lt;em&gt;trac&lt;/em&gt;, 然后执行 &lt;em&gt;saltutil.refresh_pillar&lt;/em&gt; 操作, 然后观察minion日志, 是否会刷新模块进行验证.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="targetpillar"&gt;
&lt;h2&gt;Target中的Pillar&lt;/h2&gt;
&lt;p&gt;Salt指令发送底层网络, 采用ZeroMQ PUB/SUB结构. Minion会监听SUB接口, Master会将指令发送到本地的PUB接口, 然后所有Minion均会收到该指令, 然后在Minion本地判断自己是否需要执行该指令(即Target). 当前版本中, 已经支持pillar作为Target(通过&amp;quot;-I&amp;quot;选项指定). &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L1809"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pillar_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Reads in the pillar glob match&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar target: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delim&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Got insufficient arguments for pillar match &amp;#39;&lt;/span&gt;
                  &lt;span class="s1"&gt;&amp;#39;statement from master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subdict_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出, 其匹配使用的是 &lt;em&gt;self.opts['pillar']&lt;/em&gt; 即当前Minion内存中的Pillar的数据. 因此如果在Master/Minion(当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时)修改了Pillar数据后, 想要使用最新的Pillar来做Target操作, 需要在执行前先手动执行 &lt;em&gt;saltutil.refresh_pillar&lt;/em&gt; 操作, 以刷新Minion内存中的Pillar数据.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;远程执行模块中的Pillar&lt;/h2&gt;
&lt;div class="section" id="pillar-items"&gt;
&lt;h3&gt;pillar.items&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L42"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;__grains__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会连接Master/Minion(当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时)获取最新的pillar数据并返回. 但并不会刷新Minion本地的缓存. 也就是说, 在master端修改了Pillar Tree, 在刷新pillar(saltutil.refresh_pillar)前, 可以先使用 &lt;em&gt;pillar.items&lt;/em&gt; 来验证其数据是否达到预期.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-data"&gt;
&lt;h3&gt;pillar.data&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L67"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只是创建了一个赋值引用, 指定data和执行items一样&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-item"&gt;
&lt;h3&gt;pillar.item&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L70"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;pillar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先使用pillar.items来获取最新的Master端最新的pillar数据. 然后一个for循环, 从items获取所需要的keys对应的值. 所以item可以查询多个key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-raw"&gt;
&lt;h3&gt;pillar.raw&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L93"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pillar__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pillar__&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从当前Minion本地获取 __pillar__ (self.opts[pillar])的值. 也就是说使用 &lt;em&gt;pillar.raw&lt;/em&gt; 与 &lt;em&gt;pillar.items&lt;/em&gt; 不同, 获取到的是Minion内存中的pillar的值, 并非是master端定义的值. 如果指定了key, 则返回对应key的值. 如果没有, 则返回整个 __pillar__&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-get"&gt;
&lt;h3&gt;pillar.get&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L16"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traverse_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__pillar__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和 &lt;em&gt;pillar.raw&lt;/em&gt; 工作方式类似, 是从 __pillar__ 中进行的取值, 用于获取pillar中对应的key值. 与 pillar.raw执行key不同的是, get递归获取内嵌字典的值(默认以&amp;quot;:&amp;quot;做分隔). 从最新develop分支中看, 下一个版本(Helium)中将增加merge功能.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-ext"&gt;
&lt;h3&gt;pillar.ext&lt;/h3&gt;
&lt;p&gt;与pillar.items工作方式类似, 用于获取ext pillar的值&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saltutil-refresh-pillar"&gt;
&lt;h3&gt;saltutil.refresh_pillar&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/saltutil.py#L335"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__salt__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;event.fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]({},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pillar_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Minion本地Event接口上产生一个 &lt;em&gt;pillar_refresh&lt;/em&gt; event. 之前在Minion中的Pillar中, Minion本地会监听本地Event接口, 如果捕捉到以 &lt;em&gt;pillar_refresh&lt;/em&gt; 开始的指令, 会刷新本地pillar.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;配置管理中的Pillar&lt;/h2&gt;
&lt;div class="section" id="slspillar"&gt;
&lt;h3&gt;在SLS中使用Pillar&lt;/h3&gt;
&lt;p&gt;在SLS中, 可以直接使用pillar. 如pillar['pkg'], 其直接使用的是Minion当前内存中pillar的值(self.opts['pillar']).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="state-sls-state-highstate"&gt;
&lt;h3&gt;state.sls &amp;amp; state.highstate&lt;/h3&gt;
&lt;p&gt;将这两个远程执行模块方法放到配置管理中, 因为其功能是用于向Minions发送配置管理指令.&lt;/p&gt;
&lt;p&gt;state.sls及state.highstate在代码中, 均为 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L2574"&gt;salt.state.HighState&lt;/a&gt; 对象. 在执行时为 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L526"&gt;State&lt;/a&gt; 对象. State类在实例化时,则会刷新pillar, &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L530"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Class used to execute salt states&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gather_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而_gather_pillar &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L544"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_gather_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Whenever a state run starts, gather the pillar data fresh&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;pillar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;_gather_pillar从Master上获取Minion对应的最新pillar数据, __init__方法中的 &lt;em&gt;self.opts['pillar'] = self._gather_pillar()&lt;/em&gt; 将该数据赋值给self.opts['pillar']以完成Minion本地内存中Pillar数据的刷新操作. 这就是为什么修改了Master上的Pillar的值, 而无需执行刷新操作(saltutil.refresh_pillar), 因为在执行state.highstate及state.sls时会自动应该最新的值.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ext-pillar"&gt;
&lt;h2&gt;ext_pillar&lt;/h2&gt;
&lt;p&gt;Salt支持从第三方系统中获取Pillar信息,使Salt易于与现有的CMDB系统进行数据整合. 对应的配置是master配置文件中的ext_pillar选项. 官方当前已经提供了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/ref/pillar/all/"&gt;若干驱动&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;如果已经提供的驱动并不满足需求, 自定义ext_pillar驱动也非常简单. 只需要驱动文件放到master端salt代码中pillar目录下即可, 驱动为python代码, 其中包含ext_pillar函数, 且该函数第一个参数是minion_id, 第二个参数为pillar, 其返回值是一个标准的 &lt;a class="reference external" href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries"&gt;Python字典&lt;/a&gt; 即可. 可以参照 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/pillar/cobbler.py"&gt;cobbler的ext_pillar&lt;/a&gt; 进行编写.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>SaltStack Event系统监听events测试</title><link href="/kb/saltstack-event-system-listen-events/" rel="alternate"></link><updated>2014-04-24T09:03:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-04-24:kb/saltstack-event-system-listen-events/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://pengyao.org/saltstack_event_system_listen_events.html"&gt;http://pengyao.org/saltstack_event_system_listen_events.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{{toc}}&lt;/p&gt;
&lt;p&gt;SaltStack 0.10版本中, 新增了Event系统, 官方在 &lt;a href="http://docs.saltstack.com/en/latest/topics/releases/0.10.0.html#event-system"&gt;Release
Notes&lt;/a&gt;
对其描述如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Salt Master now comes equipped with a new event system. This event
system has replaced some of the back end of the Salt client and offers
the beginning of a system which will make plugging external applications
into Salt. The event system relies on a local ZeroMQ publish socket and
other processes can connect to this socket and listen for events. The
new events can be easily managed via Salt’s event library.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时官方也在 &lt;a href="http://docs.saltstack.com/en/latest/topics/event/index.html#listening-for-events"&gt;Salt
Event系统&lt;/a&gt;
页面中提供了监听event的例子程序, 基于其进行下Event系统学习.&lt;/p&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;测试结构: Master/Minions结构, 共一台minion, 对应id为:
    &lt;em&gt;salt-minion-01.example.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Salt Version: &lt;em&gt;2014.1.1&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;p&gt;新开一个终端, 运行python, 基于其尝试监听所有的Event:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;salt.utils.event&lt;/span&gt;

&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MasterEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/var/run/salt/master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;------&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在另外一个终端执行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;*&amp;#39; test.ping
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看之前监听所有Event的终端, 有如下输出:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;#39;tag&amp;#39;: &amp;#39;20140417135823133764&amp;#39;, &amp;#39;data&amp;#39;: {&amp;#39;_stamp&amp;#39;: &amp;#39;2014-04-17T13:58:23.133956&amp;#39;, &amp;#39;minions&amp;#39;: [&amp;#39;salt-minion-01.example.com&amp;#39;]}}
------
{&amp;#39;tag&amp;#39;: &amp;#39;new_job&amp;#39;, &amp;#39;data&amp;#39;: {&amp;#39;tgt_type&amp;#39;: &amp;#39;glob&amp;#39;, &amp;#39;jid&amp;#39;: &amp;#39;20140417135823133764&amp;#39;, &amp;#39;tgt&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;_stamp&amp;#39;: &amp;#39;2014-04-17T13:58:23.134005&amp;#39;, &amp;#39;user&amp;#39;: &amp;#39;sudo_vagrant&amp;#39;, &amp;#39;arg&amp;#39;: [], &amp;#39;fun&amp;#39;: &amp;#39;test.ping&amp;#39;, &amp;#39;minions&amp;#39;: [&amp;#39;salt-minion-01.example.com&amp;#39;]}}
------
{&amp;#39;tag&amp;#39;: &amp;#39;salt/job/20140417135823133764/new&amp;#39;, &amp;#39;data&amp;#39;: {&amp;#39;tgt_type&amp;#39;: &amp;#39;glob&amp;#39;, &amp;#39;jid&amp;#39;: &amp;#39;20140417135823133764&amp;#39;, &amp;#39;tgt&amp;#39;: &amp;#39;*&amp;#39;, &amp;#39;_stamp&amp;#39;: &amp;#39;2014-04-17T13:58:23.134064&amp;#39;, &amp;#39;user&amp;#39;: &amp;#39;sudo_vagrant&amp;#39;, &amp;#39;arg&amp;#39;: [], &amp;#39;fun&amp;#39;: &amp;#39;test.ping&amp;#39;, &amp;#39;minions&amp;#39;: [&amp;#39;salt-minion-01.example.com&amp;#39;]}}
------
{&amp;#39;tag&amp;#39;: &amp;#39;20140417135823133764&amp;#39;, &amp;#39;data&amp;#39;: {&amp;#39;fun_args&amp;#39;: [], &amp;#39;jid&amp;#39;: &amp;#39;20140417135823133764&amp;#39;, &amp;#39;return&amp;#39;: True, &amp;#39;retcode&amp;#39;: 0, &amp;#39;success&amp;#39;: True, &amp;#39;cmd&amp;#39;: &amp;#39;_return&amp;#39;, &amp;#39;_stamp&amp;#39;: &amp;#39;2014-04-17T13:58:23.150356&amp;#39;, &amp;#39;fun&amp;#39;: &amp;#39;test.ping&amp;#39;, &amp;#39;id&amp;#39;: &amp;#39;salt-minion-01.example.com&amp;#39;}}
------
{&amp;#39;tag&amp;#39;: &amp;#39;salt/job/20140417135823133764/ret/salt-minion-01.example.com&amp;#39;, &amp;#39;data&amp;#39;: {&amp;#39;fun_args&amp;#39;: [], &amp;#39;jid&amp;#39;: &amp;#39;20140417135823133764&amp;#39;, &amp;#39;return&amp;#39;: True, &amp;#39;retcode&amp;#39;: 0, &amp;#39;success&amp;#39;: True, &amp;#39;cmd&amp;#39;: &amp;#39;_return&amp;#39;, &amp;#39;_stamp&amp;#39;: &amp;#39;2014-04-17T13:58:23.150397&amp;#39;, &amp;#39;fun&amp;#39;: &amp;#39;test.ping&amp;#39;, &amp;#39;id&amp;#39;: &amp;#39;salt-minion-01.example.com&amp;#39;}}
------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从输出结果看, 对于tag只是jid的, 官方在源码中标记的注释是&amp;quot;old dup
event&amp;quot;, 推测是为了兼容旧的event系统(0.17.0版本event系统进行了更新),
本次对其不做处理. 下发任务对应的tag为 &lt;em&gt;new_job&lt;/em&gt;,
并且下发任务时就master端就在event中注定了那些minions需要运行(对应的data字典中的minions).
如果tag中包含 &lt;em&gt;salt/job/&lt;/em&gt; 字样并且data字典中 &lt;em&gt;return&lt;/em&gt; 为True,
则表示该Event是minion返回的结果.&lt;/p&gt;
&lt;p&gt;同时测试下超过timeout设置(默认为5秒)的任务:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;*&amp;#39; cmd.run &amp;#39;sleep 6; echo hello world&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:34.578822&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new_job&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:34.578881&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sudo_vagrant&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep 6; echo hello world&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt/job/20140417141834578593/new&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:34.578917&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sudo_vagrant&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep 6; echo hello world&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141839587706&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:39.587908&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new_job&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141839587706&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:39.587961&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sudo_vagrant&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;saltutil.find_job&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt/job/20140417141839587706/new&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141839587706&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:39.587985&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sudo_vagrant&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;saltutil.find_job&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minions&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141839587706&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun_args&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141839587706&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2143&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ret&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sudo_vagrant&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep 6; echo hello world&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;retcode&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;True&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:39.605262&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;saltutil.find_job&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt/job/20140417141839587706/ret/salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun_args&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141839587706&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2143&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ret&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sudo_vagrant&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep 6; echo hello world&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;retcode&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;True&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:39.605321&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;saltutil.find_job&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun_args&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep 6; echo hello world&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;retcode&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:40.604562&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt/job/20140417141834578593/ret/salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun_args&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep 6; echo hello world&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20140417141834578593&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;retcode&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_return&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2014-04-17T14:18:40.604628&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt-minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了之前test.ping测试类似的输出外, 可以看到tag为 &lt;em&gt;new_job&lt;/em&gt;
的event产生后的5秒, 自动产生了一个fun值为 &lt;em&gt;saltutil.find_job&lt;/em&gt;,
其arg为之前new_job的jid的event. 然后minion返回之前运行的fun值为
&lt;em&gt;cmd.run&lt;/em&gt; 对应的进行运行信息(pid等信息, 已确保任务正在被执行).&lt;/p&gt;
&lt;p&gt;Salt对应的处理机制是master在下发指令后,如果在设置的timeout时间内,
所有minion均返回了结果, 则直接退出. 如果达到timeout时间后,
依然有minion没有返回结果, 则自动触发一个 &lt;em&gt;saltutil.find_job&lt;/em&gt; 的任务,
去所有minion上查询该任务是否在执行. 如果minion返回任务当前正在执行中,
则等待一个新的timeout周期, 如果期间所有minion均返回了结果, 则退出;
依次类推, 一直等到直到所有minion均返回结果. 如果期间在触发
&lt;em&gt;saltutil.find_job&lt;/em&gt; 时minion并没有返回任务的执行状况,
且之前并没有返回结果, 则认为minion出现问题, 就会输出&amp;quot;Minion did not
return&amp;quot; 字样(可以通过salt -v参数查询到).&lt;/p&gt;
&lt;p&gt;从该机制中可以知道, 如果经常出现minion无法返回结果的情况,
对于某些场景如规模较大或minion高负载的情况下, 达到设置的timeout时间时,
自动触发 &lt;em&gt;saltutil.find_job&lt;/em&gt; 任务,
而minion此时并没有开始运行之前下发的任务. 导致master直接认为&amp;quot;Minion
did not return&amp;quot;.
此时需要增大timeout的值(可以修改master的配置文件中的timeout选项)&lt;/p&gt;
&lt;p&gt;同时由于master会自动触发 &lt;em&gt;saltutil.find_job&lt;/em&gt; 任务,
而该任务也会记入Event系统, 所以对于如Halite等第三方系统,
执行长时间的任务时, 你会发现大量的 &lt;em&gt;saltutil.find_job&lt;/em&gt; 操作,
此为正常现象, 无需处理(当然, 有洁癖的同学可能会不爽).&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Salt提供了强大的Event系统, 第三方程序可以轻松插入Event系统,
捕获当前Salt的运行状态, 易于扩展Salt功能.&lt;/p&gt;</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>基于Salt Event系统构建Master端returner</title><link href="/kb/saltstack_master_retuner_over_event_system/" rel="alternate"></link><updated>2014-04-18T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:,2014-04-18:kb/saltstack_master_retuner_over_event_system/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/saltstack_master_retuner_over_event_system.html"&gt;http://pengyao.org/saltstack_master_retuner_over_event_system.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 的 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/ref/returners/"&gt;returner&lt;/a&gt; 是由minion端主动连接returner完成执行结果的存储, 在部分场景下并不能满足需求. 由于Salt底层已经构建了一套 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/event/index.html"&gt;Event系统&lt;/a&gt; , 所有的操作均会产生event. 因此基于Salt Event系统构建Master端returner成为一种可能.&lt;/p&gt;
&lt;p&gt;之前已经完成了 &lt;a class="reference external" href="http://pengyao.org/saltstack_event_system_listen_events.html"&gt;SaltStack Event系统监听events测试&lt;/a&gt;, 本文将基于Salt Event系统构建Master端returner.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SaltStack Event系统: &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/event/index.html"&gt;http://docs.saltstack.com/en/latest/topics/event/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SaltStack Event系统监听events测试: &lt;a class="reference external" href="http://pengyao.org/saltstack_event_system_listen_events.html"&gt;http://pengyao.org/saltstack_event_system_listen_events.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;测试结构: Master/Minions结构, 共一台minion, 对应id为: &lt;em&gt;salt-minion-01.example.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Salt Version: &lt;em&gt;2014.1.1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;本次测试结果将存放在MySQL中, 为了方便测试, 已经在Master本地部署了MySQL Server&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下操作如非特别注明, 均在Master端进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;前置配置&lt;/h3&gt;
&lt;p&gt;安装MySQLdb依赖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum -y install MySQL-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置本次测试需要使用的数据库及用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建salt数据库&lt;/span&gt;
mysql -e &lt;span class="s1"&gt;&amp;#39;create database salt&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 创建用于连接salt数据库的用户&lt;/span&gt;
mysql -e &lt;span class="s1"&gt;&amp;#39;&amp;quot;grant all on salt.* to salt@localhost identified by &amp;quot;salt_pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# 将数据库配置添加至master配置文件中&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\n\n# MySQL\nmysql.host: &amp;#39;localhost&amp;#39;\nmysql.user: &amp;#39;salt&amp;#39;\nmysql.pass: &amp;#39;salt_pass&amp;#39;\nmysql.db: &amp;#39;salt&amp;#39;\nmysql.port: 3306&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/salt/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了与salt自带的 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/ref/returners/all/salt.returners.mysql.html"&gt;mysql returner&lt;/a&gt; 兼容, 本次直接使用mysql retuner对应的数据库表结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
USE `salt`;

--
-- Table structure for table `jids`
--

DROP TABLE IF EXISTS `jids`;
CREATE TABLE `jids` (
  `jid` varchar(255) NOT NULL,
  `load` mediumtext NOT NULL,
  UNIQUE KEY `jid` (`jid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `salt_returns`
--

DROP TABLE IF EXISTS `salt_returns`;
CREATE TABLE `salt_returns` (
  `fun` varchar(50) NOT NULL,
  `jid` varchar(255) NOT NULL,
  `return` mediumtext NOT NULL,
  `id` varchar(255) NOT NULL,
  `success` varchar(10) NOT NULL,
  `full_ret` mediumtext NOT NULL,
  `alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  KEY `id` (`id`),
  KEY `jid` (`jid`),
  KEY `fun` (`fun`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="returner"&gt;
&lt;h3&gt;编写returner&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;salt_event_to_mysql.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#coding=utf8&lt;/span&gt;

&lt;span class="c1"&gt;# Import python libs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="c1"&gt;# Import salt modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;salt.config&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;salt.utils.event&lt;/span&gt;

&lt;span class="c1"&gt;# Import third party libs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;

&lt;span class="n"&gt;__opts__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/salt/master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create MySQL connect&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Listen Salt Master Event System&lt;/span&gt;
&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MasterEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sock_dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;salt/job/&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# Return Event&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# Igonre saltutil.find_job event&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;saltutil.find_job&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

            &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;INSERT INTO `salt_returns`&lt;/span&gt;
&lt;span class="s1"&gt;                (`fun`, `jid`, `return`, `id`, `success`, `full_ret` )&lt;/span&gt;
&lt;span class="s1"&gt;                VALUES (&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                 &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                 &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;COMMIT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Other Event&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行本returner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python salt_event_to_mysql.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;新开启一个终端, 运行Salt指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-01.example.com&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查mysql数据库, 查询salt_returns表数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql salt -e &lt;span class="s2"&gt;&amp;quot;select * from salt_returns\G&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*************************** 1. row ***************************
    fun: test.ping
    jid: 20140417161103569310
    return: true
    id: salt-minion-01.example.com
    success: 1
    full_ret: {&amp;quot;fun_args&amp;quot;: [], &amp;quot;jid&amp;quot;: &amp;quot;20140417161103569310&amp;quot;, &amp;quot;return&amp;quot;: true, &amp;quot;retcode&amp;quot;: 0, &amp;quot;success&amp;quot;: true, &amp;quot;cmd&amp;quot;: &amp;quot;_return&amp;quot;, &amp;quot;_stamp&amp;quot;: &amp;quot;2014-04-17T16:11:03.584859&amp;quot;, &amp;quot;fun&amp;quot;: &amp;quot;test.ping&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;salt-minion-01.example.com&amp;quot;}
    alter_time: 2014-04-17 16:11:03
&lt;/pre&gt;
&lt;p&gt;入库成功&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>Salt Runners manage学习</title><link href="/kb/salt-runners-manage-01/" rel="alternate"></link><updated>2014-03-16T19:26:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-16:kb/salt-runners-manage-01/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://pengyao.org/salt_runners_manage_01.html"&gt;http://pengyao.org/salt_runners_manage_01.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作者: pengyao&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Salt Runners manage手册:
    &lt;a href="http://docs.saltstack.com/ref/runners/all/salt.runners.manage.html?highlight=manage#salt.runners.manage"&gt;http://docs.saltstack.com/ref/runners/all/salt.runners.manage.html?highlight=manage#salt.runners.manage&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Salt Runners manage源码:
    &lt;a href="https://github.com/saltstack/salt/blob/develop/salt/runners/manage.py"&gt;https://github.com/saltstack/salt/blob/develop/salt/runners/manage.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下午灿哥在群里边分享了&lt;code&gt;salt-run
manage.status&lt;/code&gt;的用法，用于检查minion当前是否存活(可连接).
这个功能果然不错，索性就打开对应的源码，对manage所有的方法进行一次学习&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本: 0.16.3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用方法: &lt;code&gt;salt-run manage.status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出所有已知的minions的状态, 以up和down分组输出&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client = salt.client.LocalClient(__opts__[&amp;#39;conf_file&amp;#39;])
minions = client.cmd(&amp;#39;*&amp;#39;, &amp;#39;test.ping&amp;#39;, timeout=__opts__[&amp;#39;timeout&amp;#39;])   #利用client.cmd对所有的minion发送test.ping指令,用于探测minion是否存活
key = salt.key.Key(__opts__)
keys = key.list_keys()                  # 利用salt.key获取当前master上有多少minion的key，即获取到完整的minion列表

ret = {}
ret[&amp;#39;up&amp;#39;] = sorted(minions)         # 将执行test.ping有返回值的minion即存活的minion的ID放入up中
ret[&amp;#39;down&amp;#39;] = sorted(set(keys[&amp;#39;minions&amp;#39;]) - set(minions))   #完整的minion列表减去存活的minion就是down掉/无法连接的minion喽
if output:
    salt.output.display_output(ret, &amp;#39;&amp;#39;, __opts__)    # 输出
return ret
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;总结: 该方法果然很给力，从此妈妈再也不担心不知道minion是否存活喽&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;key_regen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用方法: &lt;code&gt;salt-run manage.key_regen&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;功能: 重新生成环境下的所有key (副作用甚强，慎用，慎用,
    除非你知道在做什么)&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;minions = client.cmd(&amp;#39;*&amp;#39;, &amp;#39;saltutil.regen_keys&amp;#39;)     # 执行saltutil.regen_keys，重新生成key
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;总结： 慎用，慎用，慎用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;down&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用方法: &lt;code&gt;salt-run manage.down&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出down掉/无法连接的minion&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ret = status(output=False).get(&amp;#39;down&amp;#39;, [])   # 直接用之前的status方法，然后获取down的minion列表
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;总结:
    函数编程果然是王道，省时省力，直接通过该方法查询down掉的minion，再也不麻烦了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;up&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用方法: &lt;code&gt;salt-run manage.up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出存活的minion&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ret = status(output=False).get(&amp;#39;up&amp;#39;, [])   # 和上边直接down一样，不过这次的需求变成了up而已
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;总结: 和楼上类似&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;versions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用方法: &lt;code&gt;salt-run manage.versions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出所有存活的minion的版本和master的版本对比情况&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;minions = client.cmd(&amp;#39;*&amp;#39;, &amp;#39;test.version&amp;#39;, timeout=__opts__[&amp;#39;timeout&amp;#39;])  # 通过client.cmd方法下发所有minion需要执行test.version(输出版本号)的指令

labels = {                        # 定义版本对比的描述
    -1: &amp;#39;Minion requires update&amp;#39;,
    0: &amp;#39;Up to date&amp;#39;,
    1: &amp;#39;Minion newer than master&amp;#39;,
}

version_status = {}

comps = salt.__version__.split(&amp;#39;-&amp;#39;)    # 获取master version
if len(comps) == 3:
    master_version = &amp;#39;-&amp;#39;.join(comps[0:2])
else:
    master_version = salt.__version__
for minion in minions:
    comps = minions[minion].split(&amp;#39;-&amp;#39;)
    if len(comps) == 3:
        minion_version = &amp;#39;-&amp;#39;.join(comps[0:2])
    else:
        minion_version = minions[minion]
    ver_diff = cmp(minion_version, master_version)   # 通过python的cmp方法对版本号进行对比

    if ver_diff not in version_status:
        version_status[ver_diff] = []
    version_status[ver_diff].append(minion)

ret = {}
for key in version_status:
    for minion in sorted(version_status[key]):
        ret.setdefault(labels[key], []).append(minion)

salt.output.display_output(ret, &amp;#39;&amp;#39;, __opts__)
return ret
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;总结: 利用本方法，哪些minion需要升级立马得知，谁用谁知道啊!&lt;/li&gt;
&lt;/ul&gt;</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>在SaltStack中如何使用require及watch语法</title><link href="/kb/howto-use-require-and-watch-statements/" rel="alternate"></link><updated>2014-03-16T18:40:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-16:kb/howto-use-require-and-watch-statements/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://pengyao.org/howto_to_use_require_and_watch_statements.html"&gt;http://pengyao.org/howto_to_use_require_and_watch_statements.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;英文原文出处: &lt;a href="http://intothesaltmine.org/how_to_use_require_and_watch_statements.html"&gt;http://intothesaltmine.org/how_to_use_require_and_watch_statements.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者: &lt;a href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在SaltStack配置关系系统中支持许多强大的选项。无论是简单的如软件包的安装还是使用模板和条件语句. SaltStack States可以从小巧逐步变得很复杂。幸运的是SaltStack提供一种用于解决States间依赖关系的方法. 本小节将讲述如何使用 &lt;code&gt;require&lt;/code&gt;、@require_in@、@watch@、@watch_in@&lt;/p&gt;
&lt;h2&gt;Requisites&lt;/h2&gt;
&lt;p&gt;在SaltStack的世界中，requisites(译者注: 该词没找到合适的中文翻译，暂时使用英文原词)有两种类型，直接的requisites和&amp;quot;requisite_ins&amp;quot;。这些requisites是方向性的(directional)，用于指定说&amp;quot;我依赖于某些东西&amp;quot;或&amp;quot;一些东西依赖于我&amp;quot;&lt;/p&gt;
&lt;h3&gt;require&lt;/h3&gt;
&lt;p&gt;下边是使用 &lt;code&gt;require&lt;/code&gt; 语法的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;installed&lt;/span&gt;

&lt;span class="sr"&gt;/etc/&lt;/span&gt;&lt;span class="n"&gt;vimrc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;managed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vimrc&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中， &lt;code&gt;/etc/vimrc&lt;/code&gt; 文件并不会被placed(managed)，直到 &lt;code&gt;vim&lt;/code&gt; 软件包已安装&lt;/p&gt;
&lt;h3&gt;require_in&lt;/h3&gt;
&lt;p&gt;下边是同样的例子，只是这次使用了 &lt;code&gt;require_in&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;installed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;require_in&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/etc/&lt;/span&gt;&lt;span class="n"&gt;vimrc&lt;/span&gt;

&lt;span class="sr"&gt;/etc/&lt;/span&gt;&lt;span class="n"&gt;vimrc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;managed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vimrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子的效果是相同的，在 &lt;code&gt;vim&lt;/code&gt; 中指定了 &lt;code&gt;/etc/vimrc&lt;/code&gt; 依赖于我&lt;/p&gt;
&lt;p&gt;在最后，将会创建一个从属(dependency)map，并以有限的(finite)及可预见的(predictable)顺序执行.&lt;/p&gt;
&lt;h3&gt;watch&lt;/h3&gt;
&lt;p&gt;下面将以 &lt;code&gt;watch&lt;/code&gt; 语法举例，在本例中，运行中的 &lt;code&gt;ntpd&lt;/code&gt; 服务将会关注 &lt;code&gt;/etc/ntp.conf&lt;/code&gt; 文件的变化，如果发生变化，将会触发重启服务的操作.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ntpd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;running&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/etc/&lt;/span&gt;&lt;span class="n"&gt;ntp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;

&lt;span class="sr"&gt;/etc/&lt;/span&gt;&lt;span class="n"&gt;ntp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;managed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;ntp&lt;/span&gt;&lt;span class="sr"&gt;/files/&lt;/span&gt;&lt;span class="n"&gt;ntp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;watch_in&lt;/h3&gt;
&lt;p&gt;在接下来例子中， &lt;code&gt;/etc/ntp.conf&lt;/code&gt; 声明(declaring)它应该被 &lt;code&gt;ntpd&lt;/code&gt; 服务watch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ntpd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;running&lt;/span&gt;

&lt;span class="sr"&gt;/etc/&lt;/span&gt;&lt;span class="n"&gt;ntp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;managed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;ntp&lt;/span&gt;&lt;span class="sr"&gt;/files/&lt;/span&gt;&lt;span class="n"&gt;ntp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;watch_in&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ntpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;总结(Conclusion)&lt;/h2&gt;
&lt;p&gt;在State规则中，你可以通过强大的 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;require_in&lt;/code&gt; 、 &lt;code&gt;watch&lt;/code&gt; 及 &lt;code&gt;watch_in&lt;/code&gt; 指定state间的依赖关系. 无论是一个服务应该watch一个文件的变化，还是一个服务运行前必须确保软件包已安装都可以通过它们来指定state的逻辑执行顺序.&lt;/p&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>使用Salt管理用户</title><link href="/kb/managing-user-with-salt/" rel="alternate"></link><updated>2014-03-16T18:35:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-16:kb/managing-user-with-salt/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://pengyao.org/managing_user_with_salt.html"&gt;http://pengyao.org/managing_user_with_salt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;英文原文出处: &lt;a href="http://intothesaltmine.org/blog/html/2012/12/11/managing_users_with_salt.html"&gt;http://intothesaltmine.org/blog/html/2012/12/11/managing_users_with_salt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者: &lt;a href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用Salt在多平台进行用户管理将变得非常简单。 user模块允许管理员管理(原文为present)账户各个方面和删除(absent)账户。本篇文章将描述user模块的各个组件，并将给出一个管理账户的state例子.&lt;/p&gt;
&lt;h2&gt;user.present&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;user.present&lt;/em&gt;: 确保指定的账户名存在,并指定其对应的属性. 这些属性包括如下内容:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;: 指定需要管理的账户名.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;uid&lt;/strong&gt;: 指定uid, 如果不设置将配自动分配下一个有效的uid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gid&lt;/strong&gt;: 指定默认的组id(group id)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gid_from_name&lt;/strong&gt;: 如果设置为_True_，默认的组id将自动设置为和本用户同名的组id&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;groups&lt;/strong&gt;: 分配给该用户的组列表(a list of groups). 如果组在minion上不存在，则本state会报错. 如果设置会空，将会删除本用户所属的除了默认组之外的其他组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;optional_groups&lt;/strong&gt;: 分配给用户的组列表。 如果组在minion上不存在，则state会忽略它.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;home&lt;/strong&gt;: 关于用户的家目录(home directory).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;password&lt;/strong&gt;: 设置用户hash之后的密码.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;enforce_password&lt;/strong&gt;: 当设置为_False_时，如果设置的_password_与用户原密码不同，将保持原密码不做更改.如果没有设置_password_选项，该选项将自动忽略掉.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shell&lt;/strong&gt;: 指定用户的login shell。 默认将设置为系统默认shell。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;unique&lt;/strong&gt;: UID唯一，默认为True.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;system&lt;/strong&gt;: 从_FIRST_SYSTEM_UID_和_LAST_SYSTEM_UID_间选择一个随机的UID.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;用户描述选项(GECOS)支持(当前只支持Linux和FreeBSD系统):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fullname&lt;/strong&gt;: 指定用户全名(full name).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;roomnumber&lt;/strong&gt;: 指定用户的房间号.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;workphone&lt;/strong&gt;: 指定用户的工作电话号码.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;homephone&lt;/strong&gt;: 指定用户的家庭电话号码.&lt;/p&gt;
&lt;h2&gt;user.absent&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本部分为译者依据官方手册进行的补充，原文中并没有相关内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;user.absent&lt;/em&gt; 用于删除用户.其有以下选项:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;: 指定需要删除的用户名.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;purge&lt;/strong&gt;: 设置清除用户的文件(家目录)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;force&lt;/strong&gt;: 如果用户当前已登录，则absent state会失败. 设置_force_选项为True时，就算用户当前处于登录状态也会删除本用户.&lt;/p&gt;
&lt;p&gt;当管理用户时，至少需要指定_user.present_或_user.absent_。 其他选项是可选的，比如_uid_、&lt;em&gt;gid&lt;/em&gt;、_home_等选项没有指定是，将自动使用下一个有效的或者系统默认的.&lt;/p&gt;
&lt;h2&gt;users.sls&lt;/h2&gt;
&lt;p&gt;下面将列出一个管理_cedwards_用户的state声明例子. 本state中定义了_fullname_、&lt;em&gt;shell&lt;/em&gt;、&lt;em&gt;home&lt;/em&gt;、&lt;em&gt;uid&lt;/em&gt;、_gid_和_groups_列:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cedwards&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;present&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Christer&lt;/span&gt; &lt;span class="n"&gt;Edwards&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$6$JyhDBiOi5ZyvaDWm$.5QKIgCtYOLXpLDCc9HMJ8fnAq.c3enJ32BIWGcuKt/y2awHL3w2PlNLxJD9gHE/FtKkG348P8HArXGSkd5uC/&amp;#39;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/usr/local/bin/&lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/home/&lt;/span&gt;&lt;span class="n"&gt;cedwards&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1001&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1001&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;wheel&lt;/span&gt;

&lt;span class="n"&gt;jdoe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;absent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(尽管本例中指定的密码并不是我真实的密码，不过例子中出现的密码hash串并不是一个好主意)&lt;/p&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>Salt-ssh安装配置</title><link href="/kb/salt-ssh-install-and-config/" rel="alternate"></link><updated>2014-03-16T18:30:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-16:kb/salt-ssh-install-and-config/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://clavinli.github.io/2013/10/22/saltstack-salt-ssh/"&gt;http://clavinli.github.io/2013/10/22/saltstack-salt-ssh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: clavinli&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;salt-ssh介绍&lt;/h2&gt;
&lt;p&gt;salt-ssh 是 0.17.0 新出现的一个功能，一听这名字就知道它是依赖 ssh
来进行远程命令执行的工具，好处就是你不需要在客户端安装
minion，也不需要安装 master（直接安装 salt-ssh 这个包即可），有点类似
paramiko、pssh、ansible 这类的工具，有些时候你还真的需要
salt-ssh（例如：条件不允许安装 minion、不用长期管理某台 minion）
最最重要的是 salt-ssh 并不只是单纯的 ssh 工具，它支持 salt
大部分的功能，如 grains、modules、state 等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt; 需要注意的是，salt-ssh 并没有继承原来的通讯架构
(ZeroMQ)，也就是说它的执行速度啥的都会比较慢&lt;/p&gt;
&lt;h2&gt;salt-ssh安装&lt;/h2&gt;
&lt;p&gt;去 github 下载 salt 的源安装即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# git clone https://github.com/saltstack/salt.git
# python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;salt-ssh使用&lt;/h2&gt;
&lt;p&gt;salt-ssh 是通过调用 roster 配置文件来实现的，语法很简答，定义
ID、host、user、password 即可&lt;/p&gt;
&lt;h3&gt;1、定义 roster，让 salt-ssh 生效&lt;/h3&gt;
&lt;p&gt;默认是在 /etc/salt/roster&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# vim /etc/salt/roster
squid1:
  host: 10.14.36.14
  user: root
  passwd: 123456
  port: 36000
  timeout: 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置完之后就可以进行测试了，语法跟 salt 的一样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# salt-ssh &amp;#39;squid1&amp;#39; test.ping
squid1:
    True
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2、salt-ssh 不但支持运行 shell 命令，同时它还支持 salt 本身的模块，甚至支持调用 state&lt;/h3&gt;
&lt;p&gt;执行 shell 命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# salt-ssh &amp;#39;squid1&amp;#39; -r &amp;#39;df -h&amp;#39;
squid1:
    Filesystem            Size  Used Avail Use% Mounted on
    /dev/sda1             9.9G  1.6G  7.9G  17% /
    udev                  3.9G  200K  3.9G   1% /dev
    /dev/sda3              20G  426M   19G   3% /usr/local

# salt-ssh &amp;#39;squid1&amp;#39; -r &amp;#39;cat /etc/SuSE-release&amp;#39;
squid1:
    SUSE Linux Enterprise Server 10 (x86_64)
    VERSION = 10
    PATCHLEVEL = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用 salt 本身的模块&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# salt-ssh &amp;#39;squid1&amp;#39; disk.usage
    /usr/local:
        ----------
        1K-blocks:
            20641788
        available:
            19157644
        capacity:
            3%
        filesystem:
            /dev/sda3
        used:
            435504
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;获取 grains 信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# salt-ssh &amp;#39;squid1&amp;#39; grains.item cpu_model
squid1:
    ----------
    cpu_model:
        Intel(R) Xeon(R) CPU           X3440  @ 2.53GHz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用 state 目前 0.17.1 的版本还有 bug，导致 state 调用失败，感谢 Puluto
修复了此 bug，废话少说，马上试试，&lt;a href="https://github.com/saltstack/salt/issues/7991"&gt;issue
7991&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cat temp.sls
conf_squidinit:
  file.managed:
    - name: /tmp/squid
    - source: salt://proxy/squid/templates/squid.init
    - user: root
    - group: root
    - mode: 755

# salt-ssh &amp;#39;squid1&amp;#39; state.sls temp
squid1:
    ----------
    file_|-conf_squidinit_|-/tmp/squid_|-managed:
    ----------
    __run_num__:
        0
    changes:
        ----------
        diff:
            New file
        mode:
            755
    comment:
        File /tmp/squid updated
    name:
        /tmp/squid
    result:
    True
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;salt-ssh 实战&lt;/h2&gt;
&lt;p&gt;任务就是使用 salt-ssh 安装 minion 并重启，真正实现自动化 ^^&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cat salt_install.sls
epel_install:
  file.managed:
    - name: /root/epel-release-6-8.noarch.rpm
    - source: salt://tutorial/epel-release-6-8.noarch.rpm
    - user: root
    - group: root
  cmd.run:
    - name: rpm -ivh /root/epel-release-6-8.noarch.rpm
    - unless: test -f /etc/yum.repos.d/epel.repo
    - require:
      - file: epel_install

conf_epel:
  file.managed:
    - name: /etc/yum.repos.d/epel.repo
    - source: salt://tutorial/epel.repo
    - user: root
    - group: root
    - mode: 644

salt_install:
  pkg.installed:
    - name: salt-minion
  file.managed:
    - name: /etc/salt/minion
    - source: salt://tutorial/minion
  service.running:
    - name: salt-minion
    - enable: True
    - reload: True
    - watch:
      - file: salt_install

# salt-ssh &amp;#39;squid1&amp;#39; state.sls system.states.salt_install
...

# salt-ssh &amp;#39;squid1&amp;#39; -r &amp;#39;/etc/init.d/salt-minion restart&amp;#39;
squid1:
    Stopping salt-minion daemon: ..done
    Starting salt-minion daemon: ..done
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用 salt-ssh 注意事项&lt;/h2&gt;
&lt;p&gt;salt-ssh 用的是 sshpass 进行密码交互的，所以必须安装 sshpass，salt-ssh
才能正常运行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# rpm -qa | grep sshpass
sshpass-1.05-1.el6.x86_64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;salt-ssh
使用的范围还是比较广的，适合用于那些已经部署了其他自动化运维工具的机器，如
puppet、chef，不过我主要用于初始化 minion 环境，主要还是用 salt 比较多&lt;/p&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>Salt相关使用</title><link href="/kb/salt-use-01/" rel="alternate"></link><updated>2014-03-16T18:30:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-16:kb/salt-use-01/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://blog.halfss.com/blog/2013/06/15/saltxiang-guan-shi-yong/"&gt;http://blog.halfss.com/blog/2013/06/15/saltxiang-guan-shi-yong/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: halfss&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;nodegroup&lt;/h2&gt;
&lt;p&gt;salt的命令管理在对批量的机器进行操作(如果是单个的机器进行命令操作,ssh是最直接的方法)的时候才能更显示出他的部分强大。有时候我们通过target进行各种匹配,虽然可以写的很强大,强大到我们可以匹配出任何的满足我们需求的节点,但是写这个target的时候,如果过于复杂就要花费稍微长点的时间,所以在这个时候nodegroup可以很满足我们的需求,但是呢,直接写这个group分组也是很麻烦的,有没有更好的方法呢?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;: master支持部分配置的动态加载,比如nodegroup,实现的方式是动态的读取/etc/salt/master.d/*.conf内容,我们只要去更新nodegroup中的内容就可以了&lt;/p&gt;
&lt;p&gt;我这里有多个用户都会去操作(每个用户管理的salt的机器不一样)salt,而salt-master同一个配置只能加载一次,所以我只能去维护一个定义了nodegroup文件&lt;/p&gt;
&lt;p&gt;实现方式:&lt;/p&gt;
&lt;p&gt;每个salt用户(在salt服务器上也是一个用户:普通用户)的~/groups文件夹中定义了一个个文件,每个文件有一堆的minion ID列表,然后写个脚本去读取(~/groups)文件夹中的所有文件,然后生产跟文件名对应的group名&lt;/p&gt;
&lt;p&gt;如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# ls ~/groups/
test1.txt test2.txt test3.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后执行如下命令: (这个命令为自己实现)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[halfss@salt ~]# opstack update_groups

组更新完毕
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;组生成成功后:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[halfss@salt ~]$ salt -N test1 test.ping
minion1:
    True
minion2:
    True
minion3:
    True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;update_groups的代码大概(我线上部分调整后直接粘贴过来,未测试)如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;def update_groups():&lt;/span&gt;
&lt;span class="x"&gt;  file_dir = &amp;#39;%s/groups&amp;#39; % os.path.expandvars(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;)&lt;/span&gt;
&lt;span class="x"&gt;  groups_re = &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;%s_start\n.*\n&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;%s_end\n&amp;#39; % (user,user)&lt;/span&gt;
&lt;span class="x"&gt;  groups = &amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;  for group_file in os.listdir(file_dir):&lt;/span&gt;
&lt;span class="x"&gt;    if group_file.split(&amp;#39;.&amp;#39;)[-1] != &amp;#39;txt&amp;#39;:&lt;/span&gt;
&lt;span class="x"&gt;      continue&lt;/span&gt;
&lt;span class="x"&gt;    group_file = &amp;#39;%s/%s&amp;#39; % (file_dir,group_file)&lt;/span&gt;
&lt;span class="x"&gt;    servers = [ server[:1] for server  file(group_file).readlines()]&lt;/span&gt;
&lt;span class="x"&gt;    groups += &amp;quot; %s: L@%s\n&amp;quot; % (group_file.split(&amp;#39;/&amp;#39;)[-1].split(&amp;#39;.&amp;#39;)[0],&amp;#39;,&amp;#39;.join(servers))&lt;/span&gt;
&lt;span class="x"&gt;  groups_tmp = &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;%s_start\n%s&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;%s_end\n&amp;#39; % (user,groups,user)&lt;/span&gt;
&lt;span class="x"&gt;  nodegroups = file(&amp;#39;/etc/salt/master.d/nodegroups.conf&amp;#39;,&amp;#39;r&amp;#39;).read()&lt;/span&gt;
&lt;span class="x"&gt;  nodegroups,re_count = re.subn(r&amp;#39;%s&amp;#39; % groups_re, groups_tmp,node groups&lt;/span&gt;
&lt;span class="x"&gt;  if re_count == 0:&lt;/span&gt;
&lt;span class="x"&gt;    nodegroups += groups_tmp&lt;/span&gt;
&lt;span class="x"&gt;  file(&amp;#39;/etc/salt/master.d/nodegroups.conf&amp;#39;,&amp;#39;w&amp;#39;).write(nodegroups)&lt;/span&gt;
&lt;span class="x"&gt;  print &amp;quot;组更新完毕&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;复杂的sls&lt;/h2&gt;
&lt;p&gt;有些时候默认的提供的sls的语法并不能满足实际需求,好在灵活强大的salt已经支持sls拓展(详情可以访问：&lt;a href="http://docs.saltstack.com/topics/tutorials/starting_states.html"&gt;http://docs.saltstack.com/topics/tutorials/starting_states.html&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;可以直接写python代码,只要返回值类似yaml风格一样东西就OK&lt;/p&gt;
&lt;p&gt;比如我要对节点的hosts中的某个域名做管理,找最近的IP去解析&lt;/p&gt;
&lt;p&gt;实例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="err"&gt;＃这里的&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="err"&gt;是模拟&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;192.168.1.2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s2"&gt;&amp;quot;10.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;hosts_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ping -c 4 &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;use_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;time=(.*)ms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hosts_time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;use_time&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;hosts_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hosts_time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;hosts_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hosts_time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hosts_time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;download&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host.present&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;download.cn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}]}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;salt会用yaml去解析返回的这个字典&lt;/p&gt;
&lt;h2&gt;自定义动态garins&lt;/h2&gt;
&lt;p&gt;salt中自定义的minion ID，一般遵守fqdn规范，以尽可能他提供更多的信息方便管理员进行管理，但是fqdn不是万能的，不一定能包含需要的所有信息，这个时候自定义的grains就有用了&lt;/p&gt;
&lt;p&gt;这里自定义了个grain，会根据一个URL返回的值生产一个字典，返回给salt解析&lt;/p&gt;
&lt;p&gt;/srv/salt/_grains/ops_user.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ops_user&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;grains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;ops_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://test.com/api/opsuser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;　　　＃这里放回的是一个以逗号分割的字符串&lt;/span&gt;
  &lt;span class="n"&gt;ops_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ops_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ops_user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ops_user&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grains&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ops_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后同步grains，之后所有的minion都会有和这个grain的属性了 saltutil.sync_grains&lt;/p&gt;
&lt;p&gt;不过这里有一个小问题，这个granis是静态值，除非指定节点去刷新，否则grains不会改变&lt;/p&gt;
&lt;h2&gt;salt的拓展&lt;/h2&gt;
&lt;p&gt;salt的master和minion的交互很大程度上都和网络有关系,比如在管理多个国家的机器的时候(比如大中华局域网),这个时候,用一个master来管理,先不说体验上的问题,本身就是不现实的,这个时候怎么搞呢? 分布式&lt;/p&gt;
&lt;p&gt;一个master控制多个master,同时被控制的master又可以控制很多的minion&lt;/p&gt;
&lt;p&gt;这个时候咱们的问题就好处理的多了,当然不能说完全没有问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中心master&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指定开启syndic模式,这样消息才能发送到syndic节点上&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# grep order_masters /etc/salt/master
order_masters: True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;指定为中心master节点,启动syndic服务&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;被管理的master&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# grep syndic_master /etc/salt/master
syndic_master: salt.lightcloud.cn

/etc/init.d/salt-syndic start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如总的master为master,syndic节点为syndic1&lt;/p&gt;
&lt;p&gt;将minion1的master制定为syndic,启动minion服务&lt;/p&gt;
&lt;p&gt;然后在syndic1节点就可以看到未接受的key,接受后,syndic就可以管理minion1了,同时master也可以管理minion1了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;:key的管理这块,还是仅仅minoin直接连接的节点才可以管理,也就是说刚才minion1的接受key的那个操作,只有在syndic1才可以完成,master是不行的&lt;/p&gt;
&lt;h2&gt;salt的用户认证管理&lt;/h2&gt;
&lt;p&gt;在salt服务器上可以用root来管理所有的minions,使用所有的功能,但是实际生产环境中,机器有很多,不是所有的人都要管理这些机器,就需要把这些机器分给不同的用户进行管理,这里可以使用salt的external_auth模块来做处理&lt;/p&gt;
&lt;p&gt;官方文档:&lt;a href="http://docs.saltstack.com/topics/eauth/index.html"&gt;http://docs.saltstack.com/topics/eauth/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方的例子中写的很清晰,比如master配置文件中如下的配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;external_auth:   #制定启用认证模块
  pam:    #指定所使用的认证模块,还有其他的认证模块可以使用比如ldap
    thatch:  #指定用户名(master服务器的系统用户名)
      - &amp;#39;web*&amp;#39;:   #指定匹配的minion 这里有点操蛋的是,不能使用compund模式
        - test.*   #这里指定了可以使用那些模块,后面是并列的
        - network.*
    steve:
      - .*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的这个用户thatch,可以对minion id中以web开头的使用test和network模块的所有功能,而steve这个用户就NB了,可以管理所有的minion,而且可以使用说有的功能&lt;/p&gt;
&lt;p&gt;如果在长期业务固化的系统中,这样的设定本来没什么问题,但是在业务快速迭代的系统中,业务会老是变来变去业务的负责人也同样会变来编曲,但是业务的主机名不会经常变化,这样的设定就会有问题,个人认为最好的解决方案应该是基于minion的某些属性来设定权限(可以动态的去管理这些属性);这样在业务变化的时候让这些属性也动态的去变化,权限也就动态的变化了&lt;/p&gt;
&lt;p&gt;可是默认的salt不支持这样的功能(已经跟官方反馈,个人认为这个功能在不久的将来会加上);自己也不能干等着,于是我就个所有的minion加另一个ops_user的属性(方法参考: 自定义动态garins),这里定义完了,怎么用呢?调整external的用户认证如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;external_auth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;pam&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;halfss&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;halfss1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我们看到了,我给了这２个用户halfss　halfss1所有机器的所有权限,如果这样设置的是,基本上对minion的权限管理是废了,但是还有一步,调整下salt的一段代码,如下:&lt;/p&gt;
&lt;p&gt;调整用户权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/lib/python2.6/site-packages/salt
diff client.py client.py_back
969,971d968
&amp;lt;         if self.salt_user != &amp;#39;root&amp;#39;:

&amp;lt;             tgt = &amp;#39;%s and G@ops_user:%s&amp;#39; % (tgt,self.salt_user)

&amp;lt;             expr_form = &amp;#39;compound&amp;#39;
979a977
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样普通用户即使在执行　salt　’*’　test.ping　的时候也会成功,而且仅仅是有他权限的机器执行,这样我就完成了对minion动态的分配权限.而且还带来一个好处是,普通用户的体验会更好一些,在官方的代码中,如果普通用户没有所有机器的权限,那么他直接这样执行是会报错的,官方代码中(即使是普通用户),"*"　理解为salt-master中的所有minion,而不是改用户的所有minon(这个跟他的广播机制有关)　这个功能也已经跟官方反馈,他会在0.16中实现这个功能&lt;/p&gt;
&lt;h2&gt;minion信息的集中获取&lt;/h2&gt;
&lt;p&gt;master默认会将minion是信息(pillar和grains)存储在/var/cache/salt/master/minions/下(以minoin　id创建一个目录,该目录下有个data.p的文件);这样的方式并不便于minoin信息是采集与管理(如果有很多的机器,然后获取所有机器的minion信息的时慢的要死,当然这个不能怪salt);我们可以把这些信息都放到一个文件中,便于信息的采集与管理,这里提供对信息统一收集的基础代码,如下:&lt;/p&gt;
&lt;p&gt;获取minion的grain及pillar&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/lib/python2.6/site-packages/salt/master.py

            cdir = os.path.join(self.opts[&amp;#39;cachedir&amp;#39;], &amp;#39;minions&amp;#39;, load[&amp;#39;id&amp;#39;])
            if not os.path.isdir(cdir):
                os.makedirs(cdir)
            datap = os.path.join(cdir, &amp;#39;data.p&amp;#39;)
+            file(&amp;#39;/var/log/salt/minions&amp;#39;,&amp;#39;w+&amp;#39;).write(str({
+                                &amp;#39;minion_id&amp;#39;:load[&amp;#39;id&amp;#39;],
+                                &amp;#39;grains&amp;#39;: load[&amp;#39;grains&amp;#39;],
+                                &amp;#39;pillar&amp;#39;: data})+&amp;#39;\n&amp;#39;)
            with salt.utils.fopen(datap, &amp;#39;w+&amp;#39;) as fp_:
                fp_.write(
                        self.serial.dumps(
                            {&amp;#39;grains&amp;#39;: load[&amp;#39;grains&amp;#39;],
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;自定义salt modules&lt;/h2&gt;
&lt;p&gt;salt中自定义modules,实在是太简单了,为了让你详细,先来个最简单的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# cat /srv/salt/_modules/custom.py
def test():
  return &amp;#39;i am test&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同步到所有minion&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# salt &amp;#39;*&amp;#39; saltutil.sync_modules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接就可以使用了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@localhost _modules]# salt &amp;#39;*&amp;#39;  custom.test　　＃调用方法,文件名.方法名
minion1:
    i am test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个是最简单的;但是有时候,我们需要实现一些比较复杂的功能,而这些功能有的salt已经帮我们实现了,我们仅仅需要直接拿来用就好了;还有的我们需要使用minion的中grains或者pillar的信息;在有其他的功能,我们就需要自己是实现了,先看看刚才的２个怎么搞&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 调用先有的module来显现自定义module中需要的功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;salt　salt内置的一个字典,包含了所有的salt的moudle&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@localhost _modules]# cat /srv/salt/_modules/custom.py
def test(cmd):
  return __salt__[&amp;#39;cmd.run&amp;#39;](cmd)

[root@localhost _modules]# salt &amp;#39;*&amp;#39;  custom.test ls
minion1:
    &amp;#39;
    anaconda-ks.cfg
    install.log
    install.log.syslog
    match.py
    salt
    test.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是不是有点想想不到的简单?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 使用gains中信息&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@localhost _modules]# cat /srv/salt/_modules/custom.py
def test():
  return  __grains__[&amp;#39;id&amp;#39;]

[root@localhost _modules]# salt &amp;#39;*&amp;#39;  custom.test
minion1:
    minion1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将自定义的modules文件放在配置文件中定义的file_roots(默认为/srv/salt)下的 _modules目录下,会在执行highstate的时候自动同步,或者按照如下方式,手工推送&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;*&amp;#39; saltutil.sync_modules 或者　salt &amp;#39;*&amp;#39; saltutil.sync_all
&lt;/pre&gt;&lt;/div&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>Salt States概览</title><link href="/kb/starting-states/" rel="alternate"></link><updated>2014-03-16T18:18:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-16:kb/starting-states/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://www.ituring.com.cn/article/42238"&gt;http://www.ituring.com.cn/article/42238&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: yinchuan&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;作者言&lt;/h2&gt;
&lt;p&gt;我也只是SaltStack的初学者，如果文中有错误的地方，请不吝赐教。&lt;/p&gt;
&lt;p&gt;在学习的过程，我也做了不少实验，犯了不少错，积累了一些经验，对SaltStack的运行也有一定了解，如果有什么问题，或是不太理解的地方，非常欢迎留言交流！&lt;/p&gt;
&lt;h2&gt;Salt States&lt;/h2&gt;
&lt;p&gt;参考链接：&lt;a href="http://docs.saltstack.com/topics/tutorials/starting_states.html"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简洁，简洁，简洁&lt;/p&gt;
&lt;p&gt;众多强大而有力的设计都建立在简单的原则之上。Salt SLS系统也努力向K.I.S.S看齐。（Keep It Stupidly Simple）&lt;/p&gt;
&lt;p&gt;SLS（代表SaLt State文件）是Salt State系统的核心。SLS描述了系统的目标状态，由格式简单的数据构成。这经常被称作配置管理。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Note

这篇文章从整体上介绍了Salt States，以后还会增加对各组件的深入介绍。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;只是数据而已&lt;/h2&gt;
&lt;p&gt;深入学习之前，明白SLS文件只是结构化的数据而已是很有用的。看懂和编写SLS文件不需要理解这一点，但会让你体会到SLS系统的强大。&lt;/p&gt;
&lt;p&gt;SLS文件本质上只是一些@dictionaries@，@lists@，@strings@和@numbers@。这种设计让SLS文件非常灵活，可以满足开发者的各种需求，而且可读性很高。写得越多，就越清楚到底写得是什么。&lt;/p&gt;
&lt;h2&gt;默认的数据 - YAML&lt;/h2&gt;
&lt;p&gt;Salt默认使用能找到的最简单的序列化数据格式 — — YAML，来表达SLS数据。典型的SLS文件如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
   &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些数据确保名为@apache@的软件包处于已安装状态（如果不是，那么就安装@apache@），服务进程@apache@处于运行状态。这些数据简洁，易于理解。下面简单解释一下：
 第1行是这段数据的ID，被称作ID声明。这个ID是将要执行的这些命令的名字。
 第2行和第4行表示State声明开始，使用了pkg和service这两个states。pkg使用系统本地的软件包管理器管理将要安装的软件，service管理系统守护进程。
 第3行和第5行是要执行的function。这些function定义了名字为ID的软件包和服务的目标状态。此例中，软件包应当处于已安装状态，服务必须运行。
 最后，第6行是关键字require。这被称为必要语句（Requisite），它确保了apache服务只有在成功安装软件包后才会启动。&lt;/p&gt;
&lt;h2&gt;添加配置文件和用户&lt;/h2&gt;
&lt;p&gt;部署像apache这样的web服务器时，还需要添加其他的内容。需要管理apache的配置文件，需要添加运行apache服务的用户和组。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
   &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/etc/httpd/conf/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;present&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/var/www/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/bin/&lt;/span&gt;&lt;span class="n"&gt;nologin&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;
   &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;present&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;

 &lt;span class="sr"&gt;/etc/httpd/conf/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;managed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;644&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个SLS大大扩展了上面的例子，增加了配置、用户、组，还有一个新的必要语句：watch。&lt;/p&gt;
&lt;p&gt;user和group这两个state添加在apache这个ID下，所以增加的user和group名字都是apache。require语句确保了只有在apache这个group存在时才建立user，只有在apache这个package成功安装后才会建立group。&lt;/p&gt;
&lt;p&gt;service中的require语句换成了watch，从需要1个软件包改为监视3个state（分别是pkg、file和user）。watch语句和require很相似，都能保证被监视或需要的state在自己之前执行，但是watch还有其他作用。在被监视的state发生变化时，定义watch语句的state会执行自己的watcher函数。也就是说，更新软件包，修改配置文件，修改apache用户的uid都会触发service state的watcher函数。在这个例子中，service state的watcher会重启apache服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Note

Salt的watcher概念非常有意思。Puppet中功能类似的是notify，也可以触发服务重启。Salt的watcher非常灵活，watcher本质上是在state的代码中定义的名为mod_watch()的函数，
在这个函数中想做什么事情完全就看你的需求了。我没有仔细看Puppet的notify如何实现，不知道是否有这么灵活。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;多个SLS文件&lt;/h2&gt;
&lt;p&gt;在更有扩展性的部署Salt State时，需要用到不只一个SLS。上面的例子中只使用1个SLS文件，2个或多个SLS文件可以结合形成State Tree。上面的例子还使用了一个奇怪的文件来源 — &lt;code&gt;salt://apache/httpd.conf&lt;/code&gt;，这个文件究竟在什么位置呢？&lt;/p&gt;
&lt;p&gt;SLS文件以一定的目录结构分布在master上；SLS和要下发到minion上的文件都只是普通文件。&lt;/p&gt;
&lt;p&gt;上面的例子中的文件在Salt的根目录（见&lt;a href="http://www.ituring.com.cn/article/41632"&gt;SaltStack中的文件服务器&lt;/a&gt;）分布如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apache/init.sls
apache/httpd.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;httpd.conf只是apache目录下的一个普通文件，可以直接引用。 使用多个SLS文件可以更加灵活方便，以SSH为例：&lt;/p&gt;
&lt;p&gt;ssh/init.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssh-client:
   pkg.installed

 /etc/ssh/ssh_config:
   file.managed:
     - user: root
     - group: root
     - mode: 644
     - source: salt://ssh/ssh_config
     - require:
       - pkg: openssh-client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ssh/server.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include:
   - ssh

 openssh-server:
   pkg.installed

 sshd:
   service.running:
     - require:
       - pkg: openssh-client
       - pkg: openssh-server
       - file: /etc/ssh/banner
       - file: /etc/ssh/sshd_config

 /etc/ssh/sshd_config:
   file.managed:
     - user: root
     - group: root
     - mode: 644
     - source: salt://ssh/sshd_config
     - require:
       - pkg: openssh-server

 /etc/ssh/banner:
   file:
     - managed
     - user: root
     - group: root
     - mode: 644
     - source: salt://ssh/banner
     - require:
       - pkg: openssh-server

Note

在ssh/server.sls中，用了两种不同的方式来表示用Salt管理一个文件。在ID为/etc/ssh/sshd_config段中，直接使用file.managed作为state声明，
而在ID为/etc/ssh/banner段中，使用file作为state声明，附加一个managed属性。两种表示方法的含义与结果完全一样，只是写法不同。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在State Tree如下（有些被引用的文件没有给出内容，不影响理解）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apache/init.sls
apache/httpd.conf
ssh/init.sls
ssh/server.sls
ssh/banner
ssh/ssh_config
ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ssh/server.sls中使用了include语句。include将别的SLS添加到当前文件中，所以可以require或watch被引用的SLS中定义的内容，还可以extend其内容（马上讲到）。include语句使得state可以跨文件引用。使用include相当于把被引用的内容文件添加到自身。&lt;/p&gt;
&lt;h2&gt;扩展被引用的SLS数据 Extend&lt;/h2&gt;
&lt;p&gt;扩展是什么意思呢？比如在ssh/server.sls中定义了一个apache通用的服务器，现在要增加一个带mod_python模块的apache，不需要重头写新的SLS，直接include原来的server.sls，然后增加安装mode_python的state，再在apache service的watch列表中增加mod_python即可。python/mod_python.sls内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; include:
   - apache

 extend:
   apache:
     service:
       - watch:
         - pkg: mod_python

 mod_python:
   pkg.installed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子中，先将apache目录下的init.sls文件包含进来（在include一个目录时，Salt会自动查找init.sls文件），然后扩展了ID为apache下的service state中的watch列表。&lt;/p&gt;
&lt;p&gt;也可以在Extending中修改文件的下载位置。ssh/custom-server.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include:
   - ssh.server

 extend:
   /etc/ssh/banner:
     file:
       - source: salt://ssh/custom-banner
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Extend使得Salt的SLS更加灵活。为什么SLS能够做Extend呢？文章一开始最强调了，SLS中的文件仅仅是结构化的data而已，在处理SLS时，会将其中的内容解析成Python中的dict（当然这个dict中会嵌套dict和list）。修改apache watch的内容，相当于往list里面添加一个元素；修改banner文件的下载路径相当于修改dict中的某个key对应的值。在extending时，会附加加require/watch的内容，而不是覆盖。&lt;/p&gt;
&lt;h2&gt;理解渲染系统 Render System&lt;/h2&gt;
&lt;p&gt;因为SLS仅仅是data，所以不是非得用YAML来表达。Salt默认使用YAML，只是因为易学易用。只要有对应的renderer，SLS文件可以用任何方式表达（Salt关心的是最终解析出来的数据结构，只要你的renderer能够按要求返回这个数据结构，Salt干嘛关心你如何书写源文件呢？）。&lt;/p&gt;
&lt;p&gt;Salt默认使用yaml_jinja渲染器。yaml_jinjia先用jinja2模板引擎处理SLS，然后再调用YAML解析器。这种设计的好处是，可以在SLS文件使用所有的编程结构（jinja2能怎么用，这里就能怎么用。条件，循环，Python代码，什么都可以）。&lt;/p&gt;
&lt;p&gt;其他可用的渲染器还包括：yaml_mako，使用Mako模板引擎；yaml_wempy，使用Wempy模板引擎；py，直接使用Python写SLS文件；pydsl，建立在Python语法基础上的描述语言。&lt;/p&gt;
&lt;h2&gt;简单介绍默认的渲染器—yaml_jinja&lt;/h2&gt;
&lt;p&gt;关于jinja模板引擎的使用请参考其&lt;a href="http://jinja.pocoo.org/docs"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在基于模板引擎的渲染器里，可以从3个组件中获取需要的数据：salt，grains和pilla。在模板文件中，可以用salt对象执行任意的Salt function，使用grains访问Grains数据。示例如下：
 apache/init.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;installed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RedHat&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%}&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt;
     &lt;span class="o"&gt;{%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%}&lt;/span&gt;
   &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;running&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RedHat&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%}&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt;
     &lt;span class="o"&gt;{%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%}&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/etc/httpd/conf/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;present&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/var/www/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/bin/&lt;/span&gt;&lt;span class="n"&gt;nologin&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;
   &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;present&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
       &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apache&lt;/span&gt;

 &lt;span class="sr"&gt;/etc/httpd/conf/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;managed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;conf&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;644&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子很容易理解，用到了jinja中的条件结构，如果grains中的os表明minion的操作系统是Red Hat，那么Apache的软件包名和服务名应当是httpd。&lt;/p&gt;
&lt;p&gt;再来一个更NB的例子，用到了jinja的循环结构，在设置MooseFs分布式chunkserver的模块中：
 moosefs/chunk.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;include:&lt;/span&gt;
&lt;span class="x"&gt;   - moosefs&lt;/span&gt;

&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;mnt&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls /dev/data/moose*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;.split&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; /mnt/moose&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;
&lt;span class="x"&gt;   mount.mounted:&lt;/span&gt;
&lt;span class="x"&gt;     - device: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mnt&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;     - fstype: xfs&lt;/span&gt;
&lt;span class="x"&gt;     - mkmnt: True&lt;/span&gt;
&lt;span class="x"&gt;   file.directory:&lt;/span&gt;
&lt;span class="x"&gt;     - user: mfs&lt;/span&gt;
&lt;span class="x"&gt;     - group: mfs&lt;/span&gt;
&lt;span class="x"&gt;     - require:&lt;/span&gt;
&lt;span class="x"&gt;       - user: mfs&lt;/span&gt;
&lt;span class="x"&gt;       - group: mfs&lt;/span&gt;
&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt; &amp;#39;/etc/mfshdd.cfg&amp;#39;:&lt;/span&gt;
&lt;span class="x"&gt;   file.managed:&lt;/span&gt;
&lt;span class="x"&gt;     - source: salt://moosefs/mfshdd.cfg&lt;/span&gt;
&lt;span class="x"&gt;     - user: root&lt;/span&gt;
&lt;span class="x"&gt;     - group: root&lt;/span&gt;
&lt;span class="x"&gt;     - mode: 644&lt;/span&gt;
&lt;span class="x"&gt;     - template: jinja&lt;/span&gt;
&lt;span class="x"&gt;     - require:&lt;/span&gt;
&lt;span class="x"&gt;       - pkg: mfs-chunkserver&lt;/span&gt;

&lt;span class="x"&gt; &amp;#39;/etc/mfschunkserver.cfg&amp;#39;:&lt;/span&gt;
&lt;span class="x"&gt;   file.managed:&lt;/span&gt;
&lt;span class="x"&gt;     - source: salt://moosefs/mfschunkserver.cfg&lt;/span&gt;
&lt;span class="x"&gt;     - user: root&lt;/span&gt;
&lt;span class="x"&gt;     - group: root&lt;/span&gt;
&lt;span class="x"&gt;     - mode: 644&lt;/span&gt;
&lt;span class="x"&gt;     - template: jinja&lt;/span&gt;
&lt;span class="x"&gt;     - require:&lt;/span&gt;
&lt;span class="x"&gt;       - pkg: mfs-chunkserver&lt;/span&gt;

&lt;span class="x"&gt; mfs-chunkserver:&lt;/span&gt;
&lt;span class="x"&gt;   pkg:&lt;/span&gt;
&lt;span class="x"&gt;     - installed&lt;/span&gt;
&lt;span class="x"&gt; mfschunkserver:&lt;/span&gt;
&lt;span class="x"&gt;   service:&lt;/span&gt;
&lt;span class="x"&gt;     - running&lt;/span&gt;
&lt;span class="x"&gt;     - require:&lt;/span&gt;
&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;mnt&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmd.run&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ls /dev/data/moose*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;       - mount: /mnt/moose&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;       - file: /mnt/moose&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;       - file: /etc/mfschunkserver.cfg&lt;/span&gt;
&lt;span class="x"&gt;       - file: /etc/mfshdd.cfg&lt;/span&gt;
&lt;span class="x"&gt;       - file: /var/lib/mfs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子展示了jinja的强大，多个for循环用来动态地检测并挂载磁盘，多次使用salt对象（这里使用了cmd.run这个执行模块）执行shell命令来收集数据。&lt;/p&gt;
&lt;h2&gt;简单介绍Python和PyDSL渲染器&lt;/h2&gt;
&lt;p&gt;在任务逻辑非常复杂时，默认的yaml_jinja渲染器不一定满足要求，这时可以使用Python渲染器。如何在State tree中添加使用py渲染器的SLS文件呢？简单。 一个非常简单的基本Python SLS文件： python/django.sls:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;     Install the django package&lt;/span&gt;
&lt;span class="sd"&gt;     &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;include&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;django&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pkg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;installed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这个例子也很好理解，第1行告诉Salt不使用默认的渲染器，而是用py。接着定义了函数run，这个函数的返回值必须符合Salt的要求，即HighState数据结构（我接下来就写关于HighState的文章，现在不必关心其细节，反正就是一个dict，key和value都有规定好的含义）。 如果换用pydsl渲染器，上面的例子会更简洁：
 python/django.sls:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include(&amp;#39;python&amp;#39;, delayed=True)
state(&amp;#39;django&amp;#39;).pkg.installed()
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;如果用YAML，会是下面这个样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include:
  - python

django:
  pkg.installed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这也可以看出，正常情况下使用YAML是非常合适的，但如果有需要时，使用纯粹的Python SLS可以非常NB。&lt;/p&gt;
&lt;h2&gt;运行和调试Salt States&lt;/h2&gt;
&lt;p&gt;写好的SLS如何才能应用到minion呢？在SaltStack中，远程执行是一切的基础。执行命令@salt ‘*’ state.highstate@会让所有的minion到master上来取走自己的SLS定义，然后在本地调用对应的state module（user，pkg，service等）来达到SLS描述的状态。如果这条命令只返回minion的主机名加一个’:’，多半是哪一个SLS文件有错。如果minion是以服务进程启动，执行命令@salt-call state.highstate -l debug@可以看到错误信息，便于调试。minion还可以直接在前台以debug模式运行：@salt-minion -l debug@。&lt;/p&gt;
&lt;h2&gt;接下来是什么？&lt;/h2&gt;
&lt;p&gt;接下来是关于Pillar的内容，官方文档&lt;a href="http://docs.saltstack.com/topics/tutorials/pillar.html"&gt;在此&lt;/a&gt;&lt;/p&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>Salt实战之自动安装部署MooseFS</title><link href="/kb/salt-auto-deploy-moosefs/" rel="alternate"></link><updated>2014-03-16T00:00:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-16:kb/salt-auto-deploy-moosefs/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;作者: Rainbow+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暮然回首，我做运维已经有六年多了，从最开始那个一无所知的菜鸟，到现在能够胸有成竹的管理公司几百台服务器，中间走了不少的弯路。&lt;/p&gt;
&lt;p&gt;就拿批量管理服务器这块儿来说吧，几年前自己只会Shell脚本，在服务器不多的时候，感觉还忙的过来，到后来服务器越来越多的时候就不行了。写了很多的脚本放到计划任务中定期执行，能解决一部分工作，但效率还是很低下，因为服务器太多了，每次脚本有变动就需要在所有服务器上都更新一遍，非常痛苦，后来我学会了用expect来处理交互，但效率依然很低下，等脚本自动登录完所有的机器并执行完相关命令，至少30分钟过去了。&lt;/p&gt;
&lt;p&gt;然后，我加入了一些技术群，了解到了像Func，Puppet以及Chef这样的工具，并试着使用它们来管理服务器，效果真的很好。&lt;/p&gt;
&lt;p&gt;就在几个星期以前，在Puppet群里面，我听到了Salt这个词，“绿肥”天天在群里“拉客”，号称是Func+Puppet，用Python实现的，由于我对Python很有好感，也还算有点基础，于是就试着用了用Salt。&lt;/p&gt;
&lt;p&gt;学一个东西最快的方法就是用它去解决现有的实际问题，我选择了使用Salt来自动安装部署一套MooseFS分布式文件系统，结果，我花了1天的时间就完成了整个工作，同时对Salt好感也超越了Puppet，说实话，我现在非常愿意将线上所有Puppet相关的代码都用Salt来重写一遍，其中包括整个Hadoop集群的自动部署。&lt;/p&gt;
&lt;p&gt;好了，废话不多说，下面开始讲解整个实战过程！&lt;/p&gt;
&lt;p&gt;Salt其实也仅仅只是一个工具，解决问题的关键是我们的思路，正比如我能够用Salt来实现自动安装部署MooseFS，那么前提肯定是我了解手动安装部署MooseFS的整个过程。因此，建议大家先阅读我的《在CentOS上安装部署MooseFS分布式文件系统》&lt;a href="http://heylinux.com/archives/2467.html"&gt;http://heylinux.com/archives/2467.html&lt;/a&gt;
这篇文章，了解如何通过手动的方式来安装部署MooseFS。&lt;/p&gt;
&lt;p&gt;接下来，我们首先要对Salt的基础进行一系列的学习，这里，我强烈推荐官网的Tutorial：&lt;a href="http://docs.saltstack.com/topics/tutorials/walkthrough.html"&gt;http://docs.saltstack.com/topics/tutorials/walkthrough.html&lt;/a&gt;
在完成了整个Tutorial之后，通过Module
Index页面，我们能够快速查阅Salt所有模块的功能与用法：&lt;a href="http://docs.saltstack.com/py-modindex.html"&gt;http://docs.saltstack.com/py-modindex.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的整个Salt代码结构如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree
.
├── pillar
│   ├── moosefs
│   │   └── params.sls
│   ├── _salt
│   │   └── params.sls
│   ├── schedules
│   │   └── params.sls
│   ├── top.sls
│   └── users
│       └── lists.sls
├── README.md
├── salt
│   ├── moosefs
│   │   ├── files
│   │   │   └── index.html
│   │   ├── states
│   │   │   ├── chunkserver.sls
│   │   │   ├── client.sls
│   │   │   ├── common.sls
│   │   │   ├── master.sls
│   │   │   └── metalogger.sls
│   │   └── templates
│   │       ├── httpd.conf
│   │       ├── mfschunkserver.cfg
│   │       ├── mfsexports.cfg
│   │       ├── mfshdd.cfg
│   │       ├── mfsmaster.cfg
│   │       └── mfsmetalogger.cfg
│   ├── _roles
│   │   ├── backup.sls
│   │   ├── datanode.sls
│   │   └── master.sls
│   ├── _salt
│   │   ├── states
│   │   │   └── minion.sls
│   │   └── templates
│   │       └── minion
│   ├── top.sls
│   └── users
│       └── states
│           └── create.sls
└── tools
    ├── install_salt_minion.sh
    └── tips.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Salt的默认配置需要存放在/srv下，在/srv/pillar中主要存放的是各类“参数”，而在/srv/salt下存放的是具体的state“代码文件”，以及配置文件的“模板”。&lt;/p&gt;
&lt;p&gt;Salt的入口文件分别是/srv/pillar/top.sls 与
/srv/salt/top.sls，入口文件的意思就是，在minion“客户端”上，每次请求服务端配置的时候，它们实际上所请求的是这两个文件，虽然在上面有很多的文件，但其实它们都是通过这两个文件所关联起来的。&lt;/p&gt;
&lt;p&gt;比如在/srv/pillar/top.sls文件的内容是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base:
  &amp;#39;*&amp;#39;:
    - _salt.params
    - schedules.params
    - moosefs.params
    - users.lists
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即针对所有的服务器(‘*’)，引用_salt，schedules以及moosefs目录下params.sls中的配置和users目录下lists.sls的配置。&lt;/p&gt;
&lt;p&gt;而/srv/salt/top.sls文件的内容是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base:
  &amp;#39;*&amp;#39;:
    - _salt.states.minion
    - users.states.create

  &amp;#39;ip-10-197-29-251.us-west-1.compute.internal&amp;#39;:
    - _roles.master
    - _roles.datanode

  &amp;#39;ip-10-196-9-188.us-west-1.compute.internal&amp;#39;:
    - _roles.backup
    - _roles.datanode

  &amp;#39;ip-10-197-62-239.us-west-1.compute.internal&amp;#39;:
    - _roles.datanode
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即针对所有的服务器(‘*’)，引用_salt/states目录下minion.sls中的配置，以及users/states目录下create.sls中的配置；针对服务器ip-10-197-29-251.us-west-1.compute.internal，引用_roles目录下master.sls中的配置，其余两个主机类似。&lt;/p&gt;
&lt;p&gt;而_roles/master.sls文件的内容是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include:
  - moosefs.states.master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即引用 moosefs/states 目录下 master.sls的配置，进一步查看 master.sls
的配置，就可以看到如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include:
  - moosefs.states.common

mfsmaster:
  service:
    - running
    - require:
      - cmd.run: mfsmaster
  cmd.run:
    - name: &amp;#39;cp metadata.mfs.empty metadata.mfs&amp;#39;
    - cwd: /var/mfs/
    - user: daemon
    - unless: &amp;#39;test -e metadata.mfs.back&amp;#39;
    - require:
      - file: /etc/mfs/mfsmaster.cfg

mfs-cgi:
  pkg.installed:
    - require:
      - pkg: httpd
...

/etc/httpd/conf/httpd.conf:
  file.managed:
    - source: salt://moosefs/templates/httpd.conf
    - template: jinja
    - user: root
    - group: root
    - mode: 644
    - require:
      - pkg: httpd
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即具体的配置步骤，包括了mfsmaster的service启动，初始化数据文件，修改httpd.conf配置文件等，而这一部分的具体配置，大家可以在我的&lt;a href="/GitHub站点上看到所有详细的代码："&gt;GitHub&lt;/a&gt;
&lt;a href="https://github.com/mcsrainbow/HeyDevOps/tree/master/Salt"&gt;https://github.com/mcsrainbow/HeyDevOps/tree/master/Salt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Salt默认的很多示例，目录结构非常简单，而我因为有“分类强迫症”，不喜欢将各类不同类型的文件放在同一个目录下，所以我创建了states和files以及templates目录来分别存放states，普通文件和配置文件。而创建_roles目录并在top.sls中引用，而不是通过直接引用moosefs.states.master这种方式，原因是我手里的服务器全是EC2上的云主机，主机名默认已经固定了，不方便自定义的规划，因此我在_roles目录下根据自身需要，根据线上服务器的角色创建了一些文件，在这些文件中再去引用相关的配置，这样，今后每台服务器就需要绑定好它对应的角色就可以了，更新_roles目录下的文件就可以更新所有对应的服务器。&lt;/p&gt;
&lt;p&gt;当然，这些都是我实际环境中遇到的问题，也是我所构思出来的解决方法，我在本文中着重讲解了我的思路，以及Salt的工作流程，是因为我发现在我学习的过程中，它们给我带来的困扰和疑惑是最大的。具体的states实现，大家可以通过我在&lt;a href="/GitHub中分享的代码&amp;quot;https://github.com/mcsrainbow/HeyDevOps/tree/master/Salt&amp;quot;:https://github.com/mcsrainbow/HeyDevOps/tree/master/Salt，参考&amp;quot;《在CentOS上安装部署MooseFS分布式文件系统》&amp;quot;:http://heylinux.com/archives/2467.html文章中的步骤，来学习和理解。"&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>Salt-API安装配置及使用</title><link href="/kb/salt-api-deploy-and-use/" rel="alternate"></link><updated>2014-03-09T15:21:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-09:kb/salt-api-deploy-and-use/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://pengyao.org/salt-api-deploy-and-use.html"&gt;http://pengyao.org/salt-api-deploy-and-use.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a href="/pengyao"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 官方提供有REST API格式的
&lt;a href="https://github.com/saltstack/salt-api"&gt;salt-api&lt;/a&gt;
项目，将使Salt与第三方系统集成变得尤为简单。本文讲带你了解如何安装配置Salt-API,
如何利用Salt-API获取想要的信息。&lt;/p&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://salt-api.readthedocs.org/en/latest/"&gt;salt-api手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.saltstack.com/topics/eauth/index.html"&gt;Salt External Authentication
    System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;操作系统环境: CentOS 6.4，已配置EPEL源&lt;/li&gt;
&lt;li&gt;Salt Master/Minion版本: 0.17.2, Master IP地址为 &lt;em&gt;192.168.3&lt;/em&gt;,
    用于本次测试的Minion ID为 &lt;em&gt;minion-01.example.com&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;以下操作如非特别注明，均在Master上进行&lt;/p&gt;
&lt;h3&gt;安装Salt-API&lt;/h3&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;当前EPEL中的salt-api版本为0.8.2, 存在几处bug,
本文讲使用pip方式安装0.8.3版本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 安装salt-api
pip install salt-api

# 下载服务维护脚本
wget https://raw.github.com/saltstack/salt-api/develop/pkg/rpm/salt-api -O /etc/init.d/salt-api
chmod +x /etc/init.d/salt-api
chkconfig salt-api on
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;配置Salt-API&lt;/h3&gt;
&lt;h4&gt;生成自签名证书(用于ssl)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd  /etc/pki/tls/certs
# 生成自签名证书, 过程中需要输入key密码及RDNs
make testcert
cd /etc/pki/tls/private/
# 解密key文件，生成无密码的key文件, 过程中需要输入key密码，该密码为之前生成证书时设置的密码
openssl rsa -in localhost.key -out localhost_nopass.key
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Salt-API配置&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;创建用于salt-api的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd -M -s /sbin/nologin pengyao
echo &amp;quot;pengyao_pass&amp;quot; | passwd pengyao —stdin
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;配置eauth, &lt;em&gt;/etc/salt/master.d/eauth.conf&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;external_auth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;pam&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pengyao&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;.*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;配置Salt-API, &lt;em&gt;/etc/salt/master.d/api.conf&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rest_cherrypy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
  &lt;span class="n"&gt;ssl_crt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/etc/pki/tls/certs/&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;crt&lt;/span&gt;
  &lt;span class="n"&gt;ssl_key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/etc/pki/tls/private/&lt;/span&gt;&lt;span class="n"&gt;localhost_nopass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;启动Salt-API&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service salt-api start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Salt-API使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;测试工具为操作系统自带的 &lt;em&gt;curl&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Login&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -k https://192.168.38.10:8000/login -H &amp;quot;Accept: application/x-yaml&amp;quot; \
     -d username=&amp;#39;pengyao&amp;#39; \
     -d password=&amp;#39;pengyao_pass&amp;#39; \
     -d eauth=&amp;#39;pam&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return:
- eauth: pam
  expire: 1385579710.806725
  perms:
  - .*
  start: 1385536510.8067241
  token: 784ee23c63794576a50ca5d3d890eb71efb0de6f
  user: pengyao
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 &lt;em&gt;token&lt;/em&gt;
后边的串为认证成功后获取的token串，之后可以不用再次输入密码，直接使用本Token即可&lt;/p&gt;
&lt;h3&gt;查询Minion(minion-01.example.com)的信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -k https://192.168.38.10:8000/minions/minion-01.example.com \
     -H &amp;quot;Accept: application/x-yaml&amp;quot; \
     -H &amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 &lt;em&gt;X-Auth-Token&lt;/em&gt; 后边的串为之前Login获取到的Token串,
如果请求的URL不包含 &lt;em&gt;minion-01.example.com&lt;/em&gt; ，则请求的为所有Minion的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return:
- minion-01.example.com:
    cpu_flags:
    - fpu
    - vme
    - de
    ......
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;job管理&lt;/h3&gt;
&lt;h4&gt;获取缓存的jobs列表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -k https://192.168.38.10:8000/jobs/ \
     -H &amp;quot;Accept: application/x-yaml&amp;quot; \
     -H &amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return:
- &amp;#39;20131127065003726179&amp;#39;:
    Arguments: []
    Function: test.ping
    Start Time: 2013, Nov 27 06:50:03.726179
    Target: &amp;#39;*&amp;#39;
    Target-type: glob
    User: sudo_vagrant
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;查询指定的job&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -k https://192.168.38.10:8000/jobs/20131127065003726179 \
     -H &amp;quot;Accept: application/x-yaml&amp;quot; \
     -H &amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return:
- minion-01.example.com: true
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;远程执行模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -k https://192.168.38.10:8000/ \
     -H &amp;quot;Accept: application/x-yaml&amp;quot; \
     -H &amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot; \
     -d client=&amp;#39;local&amp;#39; \
     -d tgt=&amp;#39;*&amp;#39; \
     -d fun=&amp;#39;test.ping&amp;#39; \
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以请求 &lt;em&gt;https://192.168.38.10:8000/run&lt;/em&gt;
，不过该方法为一次性使用，无法使用Token, 只能使用username和password&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return:
- minion-01.example.com: true
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;运行runner&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -k https://192.168.38.10:8000/ \
     -H &amp;quot;Accept: application/x-yaml&amp;quot; \
     -H &amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot; \
     -d client=&amp;#39;runner&amp;#39; \
     -d fun=&amp;#39;manage.status&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return:
- down: []
  up:
  - minion-01.example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Targeting&lt;/h3&gt;
&lt;p&gt;谢谢 &lt;em&gt;苦咖啡&lt;/em&gt; 提供&lt;/p&gt;
&lt;p&gt;如果想在api中使用salt的
&lt;a href="http://docs.saltstack.com/topics/targeting/"&gt;Targeting&lt;/a&gt;
功能，可以在Request的Post Data中增加 &lt;em&gt;expr_form&lt;/em&gt; (默认是 &lt;em&gt;glob&lt;/em&gt;
)及值即可:&lt;/p&gt;
&lt;p&gt;依然以curl为例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -k https://192.168.38.10:8000/ \
     -H &amp;quot;Accept: application/x-yaml&amp;quot; \
     -H &amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot; \
     -d client=&amp;#39;local&amp;#39; \
     -d tgt=&amp;#39;webcluster&amp;#39; \
     -d expr_form=&amp;#39;nodegroup&amp;#39; \
     -d fun=&amp;#39;test.ping&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将利用
&lt;a href="http://docs.saltstack.com/topics/targeting/nodegroups.html"&gt;nodegroup&lt;/a&gt;
匹配到名为 &lt;em&gt;webcluster&lt;/em&gt; 的target。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Salt
API几乎涵盖了所有的salt操作，功能强劲，尤其是需要salt和第三方系统集成的场景，值得拥有。&lt;/p&gt;</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>用salt管理成千上万的服务器</title><link href="/kb/salt-intro-1/" rel="alternate"></link><updated>2014-03-09T13:51:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-09:kb/salt-intro-1/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;文章出处: &lt;a href="http://thinkinside.tk/2013/06/24/salt_intro.html"&gt;http://thinkinside.tk/2013/06/24/salt_intro.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a href="http://weibo.com/u/1878878250"&gt;HolbrookWong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;摘要&lt;/h2&gt;
&lt;p&gt;实在是厌倦了对大量服务器日复一日的重复操作。尤其是在虚拟化的时代，系统的每个组件都有很多个相同的节点在运行，更让重复的次数再乘以N。 当我发现Salt的时候，我的眼前一亮：这正是我所需要的东西。&lt;/p&gt;
&lt;h2&gt;引言：一个”非专职运维人员“的烦恼&lt;/h2&gt;
&lt;p&gt;加入到某证券公司的IT部门，尽管所在的部门挂了一个“研发部”的名字，但是我发现有大概40%的时间是在做运维工作。&lt;/p&gt;
&lt;p&gt;这来自两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自主开发的应用，需要持续的改进，不断的更新、发布、部署、调整配置，这不是运维部门喜欢的状态。&lt;/li&gt;
&lt;li&gt;软件商提供的“产品”无法满足运维部门的要求：无法通过简单的 Q&amp;amp;A 文档保证系统的正常运行，经常需要有一定技术能力的人员解决系统运行过程中各种稀奇古怪的问题。
    这种情况下只能自己做一个“非专职运维人员”，需要频繁的登录各种服务器，执行一些命令来查看状态或者更改配置（包括配置文件的变更和软件包的安装部署）。很多操作都是不断的重复，日复一日，让人厌烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;”重复的工作应该交给程序去做“，所以我自己写过一些脚本。为了避免将脚本上传到几十台服务器并且不时进行更改，我使用Fabric来进行服务器的批量操作。&lt;/p&gt;
&lt;p&gt;尽管避免了”批量的人工操作“，但我还是在进行”人工的批量操作“。远远没有实现自动管理。将有限的生命解放出来，投入到更有意义的编码工作是一个奔四程序员应有的追求，所以我又睁大红肿的眼睛，迷茫的搜索这个世界。&lt;/p&gt;
&lt;p&gt;我发现了Puppet，Chef和CFEngine，但是并不满意。直到我发现了Salt,我的眼前一亮：这正是我所需要的东西。&lt;/p&gt;
&lt;p&gt;如果说Salt有什么独特之处打动了我，那就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单：可能是源于python的简约精神，Salt的安装配置和使用简单到了令人发指的地步。任何稍有经验的linux使用者可以在10分钟之内搭建一个测试环境并跑通一个例子（相比之下，puppet可能需要30—60分钟）。&lt;/li&gt;
&lt;li&gt;高性能：Salt使用大名鼎鼎的ZeroMQ作为通讯协议，性能极高。可以在数秒钟之内完成数据的传递&lt;/li&gt;
&lt;li&gt;可伸缩：基于ZeroMQ通信，具备很强的扩展性；可以进行分级管理，能够管理分布在广域网的上万台服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管twitter、豆瓣、oracle、等著名网站的运维团队都在使用puppet，但是我相信，他们切换到salt只是一个时间问题。毕竟不是所有的人都喜欢操纵傀儡(puppet)，但是谁又能离开盐(salt)呢？&lt;/p&gt;
&lt;p&gt;关于Salt和Puppet的对比，可以&lt;a href="http://www.opencredo.com/blog/a-dive-into-salt-stack"&gt;参考这里&lt;/a&gt; ,或者看看&lt;a href="http://www.saltstack.cn/kb/dive-into-saltstack.html"&gt;中文版&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Salt快速入门&lt;/h2&gt;
&lt;p&gt;Salt的体系结构中将节点区分为: master, minion, syndic。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master: 老大，管理端&lt;/li&gt;
&lt;li&gt;minion: 马仔，被管理端&lt;/li&gt;
&lt;li&gt;syndic: 头目，对于老大来说是马仔，对于马仔来说是老大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在入门阶段，先不考虑syndic。&lt;/p&gt;
&lt;h3&gt;安装配置&lt;/h3&gt;
&lt;p&gt;如果将操作系统区分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*NIX&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Solaris&lt;/li&gt;
&lt;li&gt;HP Unix&lt;/li&gt;
&lt;li&gt;FreeBSD&lt;/li&gt;
&lt;li&gt;OS X&lt;/li&gt;
&lt;li&gt;windows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;理论上来说，Salt可以安装在任何*NIX系统上，包括master和minion。除了源代码之外， 还可以通过Salt提供的安装脚本，或者PyPI进行安装。&lt;/p&gt;
&lt;p&gt;对于Linux，尤其是企业环境中常用的RHEL,CentOS,Ubuntu，可以通过包管理器非常容易的安装master 和/或 minion。 比如: yum(需要先配置EPEL), apt(需要增加&lt;a href="http://debian.madduck.net/repo/"&gt;http://debian.madduck.net/repo/&lt;/a&gt;库)，yaourt，ports。&lt;/p&gt;
&lt;p&gt;Mac OS X 先使用HomeBrew解决依赖包&lt;pre&gt;brew install swig zmq&lt;/pre&gt;然后用PyPI安装&lt;pre&gt;pip install salt&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;对于windows，只能安装minion（windows只适合做马仔）。从&lt;a href="http://saltstack.com/downloads/"&gt;官方网站&lt;/a&gt; 下载合适的安装包。安装过程中可以指定master地址和本机名称。 安装后需要自己启动Salt服务。配置文件在C:\salt\conf\minion。&lt;/p&gt;
&lt;p&gt;具体的各操作系统下的安装可以参考&lt;a href="http://docs.saltstack.com/topics/installation/index.html"&gt;官方文档&lt;/a&gt; 。这里为了简单，只考虑常用的RHEL/CentOS 和 windows。 在下面的例子中，使用一台RHEL/CentOS作为master， 另外一台RHEL/CentOS和一台windows 2003 Server作为 minion。&lt;/p&gt;
&lt;h3&gt;安装管理端(master)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 安装EPEL,注意选择合适的版本
rpm -ivh http://mirrors.sohu.com/fedora-epel/6/x86_64/epel-release-6-8.noarch.rpm
yum update

# 安装master
yum install salt-master

# 修改配置
vim /etc/salt/master

# 最基本的设定服务端监听的IP(比如使用VIP做master的高可用时)：
# interface: 服务端监听IP
# 其他配置参考 http://docs.saltstack.com/ref/configuration/master.html

# 启动服务(以下命令等效)
salt-master -d
/etc/init.d/salt-master start
service salt-master start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装被管理端(minion)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 安装EPEL,注意选择合适的版本
rpm -ivh http://mirrors.sohu.com/fedora-epel/6/x86_64/epel-release-6-8.noarch.rpm
yum update

# 安装minion
yum install salt-minion

# 修改配置
vim /etc/salt/minion

# 最基本的设定是指定master地址，以及本机标识符：
# master: master的主机名或IP地址
# id: 本机标识符
# 其他配置参考 http://docs.saltstack.com/ref/configuration/minion.html


# 启动服务(以下命令等效)
salt-minion -d
/etc/init.d/salt-minion start
service salt-minion start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;接受minion的托管请求&lt;/h3&gt;
&lt;p&gt;minion向master投诚后，还需要master接受才行。这个过程叫做“授信”。&lt;/p&gt;
&lt;p&gt;Salt底层使用公钥-私钥证书来保证通信信道的安全。具体的机制可以参考ZeroMQ的相关内容。Salt已经屏蔽了底层的细节，只需要使用封装好的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 在master上运行
# 查看所有minion
salt-key -L


 Accepted Keys:
 windows
 bond_app_server_main
 mac_os_vm
 salt-master
 Unaccepted Keys:
 minion1
 minion2
 Rejected Keys:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Unaccepted Keys是未许可的minion。可以使用下面的命令通过认证：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt-key -a minion1
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;安装配置好之后，首先要测试一下联通性：salt ‘*’ test.ping。salt会列出每个认证过的minion的联通状态(true 或 false)。&lt;/p&gt;
&lt;p&gt;再举一些例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 查询主机运行了多长时间
sudo salt &amp;#39;*&amp;#39; cmd.run &amp;quot;uptime&amp;quot;

# 批量重启服务
salt &amp;#39;*&amp;#39; cmd.run &amp;quot;service httpd restart&amp;quot;

# 让多台机器一起，使用Apache Bench进行压力测试
salt &amp;#39;*&amp;#39; cmd.run &amp;quot;ab -n 10 -c 2 http://www.google.com/&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，默认情况下master和minion之间使用以下端口进行通信：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4505(publish_port): salt的消息发布系统&lt;/li&gt;
&lt;li&gt;4506(ret_port):salt客户端与服务端通信的端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络的设置需要保证这些端口可以访问。&lt;/p&gt;
&lt;h3&gt;Salt的强大功能&lt;/h3&gt;
&lt;p&gt;上面的例子都是用Salt进行批量操作。但是Salt的功能不仅如此。&lt;/p&gt;
&lt;p&gt;认真分析一下我的“非专职运维工作”的内容，发现可以分为以下三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变更操作：根据需要对节点中某个资源的某种状态进行调整，并检验变更的结果&lt;/li&gt;
&lt;li&gt;配置管理：让上述行为变得“可管理”，支持“有关人士”对上述行为的标记、控制、识别、报告、跟踪和归档甚至审批和审计&lt;/li&gt;
&lt;li&gt;状态监控：随时掌握状态，发现异常。尽量在系统用户发现问题之前解决麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Salt对上述三个方面提供了完美的支持，事实上，Salt提供的功能比我需要的还要多。下图是Salt的主要功能：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/salt_functions.png" /&gt;&lt;/p&gt;
&lt;p&gt;具体的功能使用在&lt;a href="http://thinkinside.tk/2013/06/25/salt_usage.html"&gt;这篇文章&lt;/a&gt; 中详细说明。&lt;/p&gt;
&lt;h2&gt;Salt的网络资源&lt;/h2&gt;
&lt;h3&gt;网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://saltstack.com/"&gt;salt官方网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.saltstack.cn/"&gt;中国SaltStack用户组网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://intothesaltmine.org/blog/html/index.html"&gt;Into The Salt Mine,关于Salt的各种安装、配置、使用的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>深入SaltStack</title><link href="/kb/dive-into-saltstack/" rel="alternate"></link><updated>2014-03-09T11:42:00+08:00</updated><author><name>yinchuan</name></author><id>tag:,2014-03-09:kb/dive-into-saltstack/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://www.ituring.com.cn/article/37783"&gt;http://www.ituring.com.cn/article/37783&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者：&lt;a href="http://www.ituring.com.cn/users/99133"&gt;yinchuan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[译者注] 这是一篇发表在opencredo官网的博文，通过比较流行的Puppet和新发展起来的Salt，详细地介绍了Salt的功能。在征得原作者的同意后，翻译出来，与大家分享。初次翻译长文，请大家指点。 英文原文地址: &lt;a href="http://www.opencredo.com/blog/a-dive-into-salt-stack"&gt;http://www.opencredo.com/blog/a-dive-into-salt-stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对系统工程师来说，配置管理已经向前跃进了一大步. 系统配置的自动化不仅可预测,可重复, 还具有可管理性. 配置管理工具通常使用版本控制化的配置模板来描述基础设施的目标状态。凭借版本控制化的配置，可以将环境回滚（或前滚）到前面（或后序）状态；环境配置文件的自动化管理也是持续性交付管道的必要特性。&lt;/p&gt;
&lt;p&gt;CFEngine, Puppet和Chef(按年龄降序)是开源领域流行的配置管理工具。 我是一个Puppet的长期用户, 与自定义的配置脚本相比，它在系统自动化的组织性和可靠性方面带来了巨大的提升。(我是在2009年作出这一次飞跃，与此相比, 以前的日子简直是混乱不堪…).&lt;/p&gt;
&lt;p&gt;虽然配置管理工具精于描述并达到想要的状态, 但并不擅长动态地查询或设置状态. 这一点在状态资源还没有被纳入配置管理时特别明显。Llinux系统管理员的传统解决办法是ssh循环登陆节点列表并执行一堆命令。这不仅容易出错, 且每一次循环都要打开新的ssh会话，效率低下。想像一下要在1000台机器上顺序执行命令！更不用说网络安全，ssh密钥和命令执行权限的问题。这当然是一种可行的办法,但缺少一种可管理的框架。&lt;/p&gt;
&lt;p&gt;这就是命令编排工具产生的原因。这些工具旨在大量的节点上并行执行命令和实时操作。CFEngine, Puppet和Chef各自用不同的方法来解决命令编排问题。Puppet使用MCollective作为其武器,并将其集成到商业版中。&lt;/p&gt;
&lt;p&gt;近来，我开始探索使用SaltStack来解决配置管理和命令编排这两个问题。SaltStack开始于2011年，是一个相对较新的项目，但在系统管理员和DevOps工程师中拥有越来越多的粉丝。我将在本文中探讨Salt作为前途光明的替代者，并与Puppet作比较以探索其特性。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;创世之初，满是空白和无序，黑暗笼罩着整个系统……然后神安装了配置管理器，于是阳光普照！唯一的麻烦是，我们还需要安装依赖……然后配置管理器本身还得被配置……并且有时事情会有那么一点丑陋。&lt;/p&gt;
&lt;p&gt;Salt在Ubuntu和CentOS上的安装过程异常简单,我相信在有安装指南的别的系统也一样 (Arch Linux, Debian, Fedora, RedHat, CentOS, FreeBSD, Gentoo, Windows, Solaris). YMMV. 典型安装过程隐藏了不必要的细节配置，除非你需要修改他们。首先安装salt master，然后安装salt minions, 将minions指向master，安装完成。如果salt master的主机名是“salt”，都不需要将minions指向master，直接就可以运行。&lt;/p&gt;
&lt;p&gt;然而, 如果你不是使用上面提到的发行版或操作系统, 你很可能需要卷起袖子自己手动安装一些依赖。包括Python (&gt;= 2.6 \&amp;lt; 3.0), ZeroMQ, pyzmq, PyCrypto, msgpack-python和YAML的Python绑定.&lt;/p&gt;
&lt;p&gt;另一方面, Puppet在多数基础安装时只依赖Ruby和Facter, 依赖带来的麻烦显著减少. 然而，Puppet的依赖列表可以进一步增加，包括augeas-libs, dmidecode, hiera, libselinux-ruby, pciutils, ruby-augeas, ruby-irb, ruby-rdoc, rubygem-json, ruby-shadow, rubygems. 这取决于Puppet的版本和你想要使用的功能。&lt;/p&gt;
&lt;p&gt;我喜欢Salt包安装的简单明了。For the cases mentioned it is trivial to set up and get going. 如果你想亲自安装和配置的繁过程, 跟着安装指南做即可。
If you are like me though and you prefer your provisioning and configuration all in one gift wrapped package, que Vagrant to the rescue and download this project by elasticdog on github.&lt;/p&gt;
&lt;h2&gt;配置管理&lt;/h2&gt;
&lt;h3&gt;配置状态&lt;/h3&gt;
&lt;p&gt;配置管理对Puppet来说是小菜一叠，对Salt又如何呢。让我（高兴的）惊讶的是，这件事简单到令人发指。和Puppet一样，在Salt中可以描述系统的目标状态。. Salt将其称之为一个state, 配置模块是state模块。Salt的State模块文件用YAML写成，以.sls结尾。它们从功能上等同于Puppet模块的manifest文件，后者用Puppet DSL写成，以.pp结尾。&lt;/p&gt;
&lt;p&gt;Salt在master的配置文件中指定“file roots”, 类似于Puppet的“module path”, 但同时包含了模块根目录和环境类型。举例来说，在Salt中我们可以分别指定development和test环境配置文件路径. 注意base环境是必须存在的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;file_roots&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/salt/&lt;/span&gt;
  &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/salt/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
  &lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/salt/&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;base环境必须包含Salt的入口top文件(叫做top.sls).base定义了一个或多个环境，用正则来匹配节点，然后引用相应的Salt states. top文件与Puppet的nodes文件相似。(Puppet入口点是site文件,在Salt中不需要).&lt;/p&gt;
&lt;p&gt;假设有一个Salt master和两个minions (由Elasticdog github提供)，我想要在两个minions上安装mongodb。如果在默认的软件仓库中有mongodb包，只需要3步即可。&lt;/p&gt;
&lt;p&gt;1、在top.sls中指定节点:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dev:
  &amp;#39;minion*.example.com&amp;#39;:
    - mongodb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、在dev/mongodb.sls中描述状态:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、传递状态到salt minions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;minion*&amp;#39; state.highstate -v

Executing job with jid 20121218102842533621
-------------------------------------------

minion1.example.com:
----------
State: - pkg
Name: mongodb
Function: installed
Result: True
Comment: Package mongodb installed
Changes: libicu: {&amp;#39;new&amp;#39;: &amp;#39;3.6-5.16.1&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
mongodb: {&amp;#39;new&amp;#39;: &amp;#39;1.6.4-1.el5&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
boost: {&amp;#39;new&amp;#39;: &amp;#39;1.33.1-15.el5&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
js: {&amp;#39;new&amp;#39;: &amp;#39;1.70-8.el5&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}

minion2.example.com:
----------
State: - pkg
Name: mongodb
Function: installed
Result: True
Comment: Package mongodb installed
Changes: libicu: {&amp;#39;new&amp;#39;: &amp;#39;3.6-5.16.1&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
mongodb: {&amp;#39;new&amp;#39;: &amp;#39;1.6.4-1.el5&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
boost: {&amp;#39;new&amp;#39;: &amp;#39;1.33.1-15.el5&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
js: {&amp;#39;new&amp;#39;: &amp;#39;1.70-8.el5&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置描述文件与Puppet非常相似。但格式差别很大。这是因为Puppet使用自己的ruby-like DSL, 而Salt使用YAML. 正是由于这点不同，造就了Salt state配置文件在视觉上的简洁性。YAML对人类可读也容易被映射到数据结构, 非常适合做配置管理中的资源描述。这不是说Puppet DSL不清晰或不结构化- it is neither - 但很难胜过YAML. YAML可以快速写成，在我的经验看，比Puppet DSL要容易生成.&lt;/p&gt;
&lt;p&gt;注意: 配置管理社区关于声明配置的最佳方式一直存在争论。部分人青睐于利用编程语言（比如说Ruby）的灵活性。Chef是其中的代表。Puppet处于中间地段。当使用现成的功能时，Puppet DSL非常强大。但要给配置开发者更大的能力，就必须使用内部的Ruby DSL。在波谱的另一端，Salt的简单YAML状态描述非常结构化。然而，Salt也支持渲染诸如JSON, Mako, Wempy和Jinja来扩展其能力, 在将来还会支持XML,原生Python及其他。&lt;/p&gt;
&lt;h3&gt;内置的state模块&lt;/h3&gt;
&lt;p&gt;我知道Salt是比Puppet新（注：原文为“近”字，在转载时觉得不妥、进行了修正）的项目， 我完全可以预料到不会有太多可用的内置模块。我错了: Salt有大量的内置模块，包含Puppet中的大部分必要模块比如 cron, exec (Salt是cmd), file, group, host, mount, package (Salt中是pkg), service, ssh_authorized_key (Salt是ssh_auth)和user。&lt;/p&gt;
&lt;p&gt;尽管如此, Puppet仍然具有部分优势。比如, 我非常喜欢Puppet的Augeas模块。Augeas把内容当作value树，允许你修改(而不是覆盖)一个已存在的配置文件。&lt;/p&gt;
&lt;p&gt;虽然Salt有一个Augeas execution模块，但很不幸貌似没有Augeas的state模块。虽然这样，Salt也有一些自己特有的东西，比如针对git, hg和svn的内置state模块.&lt;/p&gt;
&lt;h3&gt;模板&lt;/h3&gt;
&lt;p&gt;Puppet具有开盒即用的模板系统。Puppet有file资源和template资源的概念，这些资源分布在模块目录结构的不同路径下。在Salt中, files和templates在同一个位置。通过为template指令指定type来区分是template还是普通文件资源, type可以是jinja, mako或wempy。好处是可以很容易为file资源增加逻辑。state文件可能看起来像下面这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/myapp.conf:
  file.managed:
    - source: salt://files/myapp.conf
    - mode: 644
    - owner: root
    - group: root
    - template: jinja
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意最后一行, 指明被管理的文件是一个jinja模板。&lt;/p&gt;
&lt;p&gt;配置文件可以使用jinja的语法来增加逻辑。举例来说, 假设你的应用程序配置文件中用到了主机名。再假设在Ubuntuh 只需要短主机名（hostname），在CentOS需要FQDN。这可以很容易地在模板文件myapp.conf中指定:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ubuntu&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;host: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CentOS&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;host: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fqdn&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在CentOS节点minion1上结果文件/etc/myapp.conf将包含以下内容:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minion1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;变量&lt;/h3&gt;
&lt;p&gt;Salt中的全局变量不能在使用时定义。在对变量的支持方面Puppet更加直观和灵活。在Salt中, 所有的变量保存在单独的位置。这样做不够灵活，但优势是更有秩序。用Salt的话讲，变量叫做“pillars”。pillars的位置在salt master的配置文件中指定:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pillar_roots&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/salt/&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和state文件一样, 首先创建一个top文件，在其中可以引用相关的pillar模块。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base:
  &amp;#39;*&amp;#39;:
    - packages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个top文件引用了名为packages.sls的state文件, 其中包含将要安装的软件包的版本号的变量，如下所示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;声明了两个pillar, mongodb和httpd, 然后可以在state文件中用如下方式引用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pillar[&amp;#39;mongodb&amp;#39;]
pillar[&amp;#39;httpd&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;模拟执行(Dry run)&lt;/h3&gt;
&lt;p&gt;管理系统有点像驾驶飞机。如果不小心谨慎，将会是高风险的事情。假设我是一个双翼飞机的驾驶员，将做一个危险的aerial manoeuvre, 我多半会希望能够先模拟飞行。除非我像Red Baron一样无所畏惧。无论如何，还好在执行Salt之前可以先做测试。你需要做的仅仅是将Test设置为True。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;minion1.example.com&amp;#39; state.highstate -v test=True

minion1.example.com:
----------
State: - file
Name: /etc/myapp.conf
Function: managed
Result: None
Comment: The following values are set to be changed:
newfile: /etc/myapp.conf

Changes:
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;在配置管理方面，Salt在Puppet面前还是能够站稳脚跟的。Salt安装非常简单，属于简单主义的开发风格, 功能丰富。总的来说，不需要过多的操作就可以完成事情。我发现的唯一问题是salt-master和minion之间的连接有时会无故断掉。搜索一番后，我发现其他人在Salt 0.10.5这个版本上也遇到了同样的问题。希望这个问题在下一个版本中得到解决。&lt;/p&gt;
&lt;h2&gt;命令编排和远程执行&lt;/h2&gt;
&lt;h3&gt;MCollective&lt;/h3&gt;
&lt;p&gt;MCollective是 Puppet的命令编排解决方案。由R.I.Pienaar在PuppetLabs那帮人引起重视之前独立开发完成。MCollective使用message broker (比如ActiveMQ)通过pub-sub总线来传递消息, 可以并行通信，这比用ssh快得多。这是一可以理解特定消息并产生响应的框架。Puppet和MCollective现在可以在同一个框架下工作，同时提供完成配置管理和命令编排的功能。&lt;/p&gt;
&lt;p&gt;先不管MCollective的优势，有两个负担能够打击你的激情。第一，MCollective只是和Puppet松散集成，至少对社区版本来讲是这样 。MCollective有单独的安装包，独立的配置文件。另外你还需要安装配置broker(比如ActiveMQ)，来与MCollective一起工作. 虽然不难，但很繁琐。最后，你还不得不自己解决生产环境中通信渠道的安全问题。不幸的是，这个就有点困难。&lt;/p&gt;
&lt;p&gt;MCollective的第二个问题是相对来讲缺少一些自带的功能。有很多现成的插件可以下载安装(https://github.com/puppetlabs/mcollective-plugins), 用Ruby写自己的插件也不是很复杂－不过想要立即使用的话，障碍比想像得要大。Nevertheless, given that the framework is solid and extensible, dabbling in Ruby plugins soon makes the real power of MCollective apparent.&lt;/p&gt;
&lt;h3&gt;Salt&lt;/h3&gt;
&lt;p&gt;另一方面，Salt生来就有命令编排的功能。最先设想的就是远程执行技术，然后才添加的配置管理管理。Salt使用轻量的ZeroMQ来处理消息。结果就是不需要单独的安装。装好Salt后，配置管理和命令编排就可以工作了。毫不惊奇,Salt state模块和execution模块的命令在语法上类似，所以很直观。再看Puppet和MCollective组合,各自使用不同的工具和语法结构，需要额外的时间去学习。&lt;/p&gt;
&lt;p&gt;Salt远程执行功能的可用性令人印象深刻。当前的在线文档列出了超过100个不同的内置excution模块－包括augeas！(所以augeas成为state模块只是时间上的问题).&lt;/p&gt;
&lt;p&gt;举个简单的例子，看看通用的“cmd.run”模块和指令。这在你知道想要执行的命令却又没有现成的模块可用时非常有用，- 或者你仅仅想要快速地远程执行命令。假设我想在所有节点上检查运行的内核版本号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;*&amp;#39; cmd.run &amp;quot;uname -r&amp;quot;

minion1.example.com: 2.6.18-274.18.1.el5
minion2.example.com: 2.6.18-274.18.1.el5
salt.example.com: 2.6.18-274.18.1.el5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者我想看看磁盘使用情况:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;*&amp;#39; cmd.run &amp;quot;df -h&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;顺便说一下, Salt有一个模块用来查看磁盘用量以及其他磁盘相关的查询:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &amp;#39;*&amp;#39; disk.usage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用内置模块而不用cmd.run发送shell命令的好处是，模块通常返回固定结构的数据。能够以编程的方式用在自动化处理上。&lt;/p&gt;
&lt;p&gt;有很多现成的execution模块来满足通用的管理任务，比如apt, at, cp, cron, disk, extfs, file, hosts, iptables, mount, network, pam, parted, pkg, ps, selinux, shadow, ssh, and test. 也有大量的模块用于指定的软件包和应用程序，比如apache, cassandra, djangomod, git, mongodb, mysql, nginx, nova, postgres, solr, sqlite3, 和tomcat.&lt;/p&gt;
&lt;p&gt;甚至支持执行Puppet程序。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;毫无疑问，Salt远程执行比Puppet加MCollective更优雅，附带可用的功能更多。支持动态查询和大规模的服务编排。要查看完整的功能，请参考salt execution模块的文档。&lt;/p&gt;
&lt;h2&gt;附加功能&lt;/h2&gt;
&lt;h3&gt;Dashboard&lt;/h3&gt;
&lt;p&gt;puppet使用Puppet dashboard. Salt目前没有图形化的界面。我知道，我们都大爱命令行。不过，有时看到满屏幕的绿色或是点点按钮也是很惬意的。 认真的讲，dashboard是获得你所管理的节点网络state概览的好工具。Salt的路线图中没有图形界面，希望最终会出现。&lt;/p&gt;
&lt;h3&gt;Returners&lt;/h3&gt;
&lt;p&gt;Returners是minion返回数据到达后被调用的模块。不将返回数据传递给salt master，而是调用Returner模块来将数据发给其他服务，通常是数据库。Salt目前支持的returner，可以连接cassandra, mongo, redis和mysql. 也可以很容易的用Python脚本为其他服务写一个returner。&lt;/p&gt;
&lt;h3&gt;Salt Syndic&lt;/h3&gt;
&lt;p&gt;Salt文档将Salt Syndic描述为"一个可以构建Salt命令拓扑的强大工具“。实际意义上，Salt Syndic可以让一个运行Syndic服务的Salt master连接到更高层的master。&lt;/p&gt;
&lt;p&gt;假设你有多个不同的Salt环境，每个环境都有一个master。这些环境可能是特的云或是有防火墙的网络。假设你想同时控制这几个环境中的minions。你可以在想要控制的master主机上安装Salt Syndic。Salt Syndic创建了传输接口，在最顶层的master看来，就像是控制了很多的minion,但配置状态实际上是传递给了多个master。可以将其想像为军队的命令传递系统。&lt;/p&gt;
&lt;h3&gt;集成测试&lt;/h3&gt;
&lt;p&gt;有两个采用现有测试框架的项目给Puppet增加测试功能，名字是cucumber-puppet (使用 Cucumber框架)和rspec-puppet (使用RSpec).&lt;/p&gt;
&lt;p&gt;Salt采取的做法是通过一系列的集成类提供对集成测试的支持，roadmap中提到未来会使用Unittest2和pytest做单元测试。&lt;/p&gt;
&lt;p&gt;自动化集成测试是持续性交付管道被忽视的领域，能有一些内建的支持是非常好的。这也是以后的博文中将探讨的有趣领域&lt;/p&gt;
&lt;h3&gt;结论&lt;/h3&gt;
&lt;p&gt;我的目的是看看Salt Stack是否能做为配置管理和系统命令编排的解决方案。我的方法是与Puppet中最常用的功能作比较，以探索Salt的功能。结论是很耀眼的。Salt Stack不仅自带了很多功能，且易于安装，使用，扩展。 很明显，Salt前途一片光明。&lt;/p&gt;
&lt;h2&gt;有用的链接&lt;/h2&gt;
&lt;p&gt;Saltstack主页: &lt;a href="http://saltstack.org"&gt;http://saltstack.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Salt下载: &lt;a href="http://saltstack.org/download/"&gt;http://saltstack.org/download/&lt;/a&gt; (转载修正：该链接已失效)&lt;/p&gt;
&lt;p&gt;Salt在GitHub: &lt;a href="https://github.com/saltstack/salt"&gt;https://github.com/saltstack/salt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Salt开发者博客: &lt;a href="http://red45.wordpress.com/"&gt;http://red45.wordpress.com/&lt;/a&gt;&lt;/p&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>SaltStack初探</title><link href="/kb/salt-first-view/" rel="alternate"></link><updated>2014-03-09T11:22:00+08:00</updated><author><name>cssug</name></author><id>tag:,2014-03-09:kb/salt-first-view/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;文章来源: &lt;a href="http://www.oschina.net/translate/getting-started-salt-stack-other-configuration-management-system-built-python"&gt;http://www.oschina.net/translate/getting-started-salt-stack-other-configuration-management-system-built-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文: &lt;a href="http://www.linuxjournal.com/content/getting-started-salt-stack-other-configuration-management-system-built-python"&gt;http://www.linuxjournal.com/content/getting-started-salt-stack-other-configuration-management-system-built-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者: 葱油拌面 Lax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不久前的一天，当我自豪穿着SaltStack 文化衫的时候，我的女儿看到后就当面问我，“Salt Stack 是什么呀？” 于是，我开始了作出了如下的解释，假如你有很多台服务器而且想要操作这些服务器，你也许需要一台一台的登录这些服务器，每次作出一次操作变更。这些操作可能是相当简单的，比如重启他们或者检查他们已经运行了多久，更或者，你想要做些更复杂的事情，比如安装软件和按照你的特殊需求来配置他们，也许你只是想要增加用户并且配置他们的权限。&lt;/p&gt;
&lt;p&gt;假如你有百十来台服务器，你应该怎么做？想象一下你每次一台一台的登陆这些服务器，执行同样的命令在这些100台的服务器中并且编辑同一个配置文件，你可以想象吗？这是多么的苦逼！仅仅更新一下用户的密码策划就要用掉数天的时间，并且你可能出现错误的操作，怎么样通过一个命令一次完成所有服务器的操作？怎么解决？答案就是，SaltStack！&lt;/p&gt;
&lt;p&gt;和我女儿一样，你也许还没有听说过&lt;a href="http://saltstack.org"&gt;SaltStack&lt;/a&gt;，但是你可能比较熟悉&lt;a href="http://puppetlabs.com"&gt;Puppet&lt;/a&gt; 和&lt;a href="http://opscode.com.Salt"&gt;Chef&lt;/a&gt; 跟他们差不多，但是Salt 是用Python写的，且对于设备的要求是相当轻量级的，使用起来相当容易(在我看来)，Salt 通讯层使用&lt;a href="http://www.zeromq.org"&gt;0MQ&lt;/a&gt;，这是使得它很快速。并且它是完全开源的，遵守&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache2&lt;/a&gt;开源协议.拥有一个活跃和高效的开源社区。
目前，他们没有任何计划来发布一个残缺的社区版本或一个功能丰富的商业版本，对于Salt，你当前获得的这个版本是任何人都可以获得的，不论你是否付过钱。当然他们有发行商业版本的计划，不过它将是紧密的社区版本，且通过更多的测试和质量保证，以及相关的培训。&lt;/p&gt;
&lt;p&gt;Salt和Puppet Chef 一样可以让你同时在多台服务器上执行命令也包括安装和配置软件。Salt 有两个主要的功能：配置管理和远程执行。&lt;/p&gt;
&lt;p&gt;Salt Stack 是一个命令行工具，这里没有任何地方需要你点击你的鼠标，执行的结果也会像字符界面一样反馈到你的屏幕上。这很好吧，它使得事情变得简单，并且很多服务器不需要一个图形界面。(注解：我使用Salt 条款在本文中，他们指的是同一个东西在上下文中)&lt;/p&gt;
&lt;p&gt;在本文，Salt 包含两个工具，第一个是远程执行，虽然没有一个清晰的描述，但是假如你想要一个配置管理和远程执行的工具，在Salt中你可以找到很多方法。这可以让你登陆一台主服务器然后同时执行命令在一台或者多台服务器上。使用Salt，你仅仅需要在主服务器上输入命令，它会在每台机器上甚至一个服务器群组执行。&lt;/p&gt;
&lt;p&gt;第二，Salt 能够存储配置指令，然后引导其他机器按照这些指令作出动作，如，安装软件，更改软件的配置，反馈这个任务成功执行与否。
接下来，我来演示使用Salt 安装一个额外的包，并且仅仅通过一个命令配置这个包。&lt;/p&gt;
&lt;h2&gt;安装 Salt&lt;/h2&gt;
&lt;p&gt;Salt 是不断变更的，也许当你读到本文时，有些事情已经改变，你可以在这里找到最新的文档：http://docs.saltstack.com/en/latest/index.html&lt;/p&gt;
&lt;p&gt;在安装Salt之前，你需要一些简单的准备工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一台Linux 服务器&lt;/li&gt;
&lt;li&gt;sudo 或者root密码&lt;/li&gt;
&lt;li&gt;这台服务器能够连接因特网&lt;/li&gt;
&lt;li&gt;知道你的服务器的IP地址(可以是公网或私网IP)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然Salt被设计为能够连接多台服务器，但在本文中，你可以在一台服务器上完成这些操作。
使用你的包管理器来安装Salt，你可以根据你系统版本分支找到相关的&lt;a href="http://docs.saltstack.org/en/latest/topics/installation/index.html"&gt;安装手册&lt;/a&gt;,你也需要sudo或者root权限，来安装和使用salt&lt;/p&gt;
&lt;p&gt;使用包管理的好处或者从在线的源代码安装是一个无法结束的争论，根据你的系统版本分支，选择更好的安装方法。
假如你倾向于使用源代码来安装，你可以在Salt 项目Github版本库里找到最新的&lt;a href="https://github.com/saltstack/salt"&gt;Salt源码文件&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;安装完成Salt-master和salt-minion后，希望一切运行正常且你没有收到错误信息。假如Salt并没有正常运行，你可以在到&lt;a href="http://saltstack.org/learn/#tab-mailinglist"&gt;SaltStack的邮件列表&lt;/a&gt;和Salt IRC频道寻求帮助。&lt;/p&gt;
&lt;h2&gt;配置主服务器和从服务器&lt;/h2&gt;
&lt;p&gt;主服务器和从服务器指的是控制器和被控制的服务器，这个主服务器本质上是中央协调中心对所有的从服务器，从服务器类似client/server配置，这里的主服务器是server，从服务器是client.&lt;/p&gt;
&lt;h3&gt;从服务器配置&lt;/h3&gt;
&lt;p&gt;在本文中，我配置salt-master和salt-minion 命令在同一台机器上，假如你在配置多台服务器，挑选其中一个为master，剩下的成为minions.根据你的需要来配置master和minion，接下来的我会解释如何配置一台服务器为master和另外的机器为minions.&lt;/p&gt;
&lt;p&gt;Salt的配置文件在/etc/salt目录下，默认，这些文件被命名为minion和master，假如你在同一台机器安装了salt-master和salt-minion，你会看到不同的两个文件，master和minion&lt;/p&gt;
&lt;p&gt;首先，你需要告诉你的minion怎样找到并连接你的Master服务器。即使你运行minion和Master在同一台服务器上，你仍然要告诉minion你的master在哪儿。&lt;/p&gt;
&lt;p&gt;1，使用你最喜欢的文本编辑器，打开minion配置文件&lt;/p&gt;
&lt;p&gt;2，取消注释行#master，移除# 替换为你的Master服务器的IP地址，应该是这样:master:你的master IP地址。（假如以上操作，在同一台服务器，此时增加 127.0.0.1)&lt;/p&gt;
&lt;p&gt;3,命名一个昵称给你的服务器，查找到#id行，再一次移除#号，增加一个nameid：1st-salt-minion，（这个名字可以是任何字符串的）&lt;/p&gt;
&lt;p&gt;4，为了重新加载新的配置，你需要使用sudo 重启你的salt-minion进程，-d 选项，启动salt-minion为一个后台进程，这样子的话，你可以访问您的命令行发布更多的命令。&lt;/p&gt;
&lt;h3&gt;认证 Minion Keys&lt;/h3&gt;
&lt;p&gt;现在你的minion 已经知道到master在哪里，接下来让他们进行彼此验证，Salt使用公共密钥加密来确保master和minions的安全通信。你需要通过在master端验证minion的证书来明确master和minion之间的是授信的。&lt;/p&gt;
&lt;p&gt;认证minion的证书使用salt-key命令，Salt自动生成这些证书，你需要做的仅仅是认证你需要的证书。&lt;/p&gt;
&lt;p&gt;1，输入salt-key -L 列出所以没有认证，认证过，拒绝认证的证书&lt;/p&gt;
&lt;p&gt;2，你应该可以看到一个没有认证的证书1st-Salt-Minion（或者你自己选择的minion）&lt;/p&gt;
&lt;p&gt;3,认证这个证书使用 sudo salt-key -a 1st-salt-minion&lt;/p&gt;
&lt;h3&gt;通信测试&lt;/h3&gt;
&lt;p&gt;现在你已经有了一台 salt-master和一台salt-minion，并且master和minion已经相互信任，你可以从master 使用一个test ping的命令来测试他们之间的连接。假如你的master能够连接到minion，将会返回一个“return”.输入’‘’salt ’*‘ test.ping’’’,它应该有如下输出:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;{1st-Salt-Minion: True}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，通配符 *代表所有minion，因为这里你只有一台服务器，算是一个简单的模拟测试（要比salt ‘1st-salt-Minion’ test ping 快多了）&lt;/p&gt;
&lt;p&gt;假如你收到“True”，证明你已经成功安装和配置完成salt stack。&lt;/p&gt;
&lt;p&gt;如果没有的话，你也许需要重启你的master和minion 不带-d参数，这样子的话，你能够获取到更多输出信息，更多的参考资料，请查看Salt 官方文档http://docs.saltstack.org/en/latest/topics/configuration.html&lt;/p&gt;
&lt;p&gt;Salt的语法结构，包括命令，目标和动作，举个例子，* 指任何主机（* 是一个通配符），test.ping 是动作。&lt;/p&gt;
&lt;p&gt;你可以在已经链接和信任的主机上执行任何可用的命令，关键提示:这些需要执行的命令在目标主机上必须可用，例如，如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo salt &amp;#39;*&amp;#39; cmd.run &amp;quot;service apache2 restart&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个命令只会在已经安装了apach2e web服务器的主机上执行，另外，你也可以使用这样的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo salt &amp;#39;*&amp;#39; cmd.run &amp;quot;service httpd restart&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外一个例子，也许你想要查询你的主机已经运行了多长时间，你可以这样子做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo salt &amp;#39;*&amp;#39; cmd.run &amp;quot;uptime&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在举另外一个例子，假如你的Apache Bench(译者注：一个apche 开源压力测试工具)安装在master上而没有安装在minion上，下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo salt &amp;#39;*&amp;#39; cmd.run &amp;quot;ab -n 10 -c 2 http://www.google.com:80/index.html&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你尝试在minion上执行，你将会失败，因为Apache Bench 没有安装在minion上。&lt;/p&gt;
&lt;p&gt;在这里一切皆有可能，你可以在一个终端中一次重启你所有的机器，升级系统软件或者是检查你的机器状态，而不是像以前一样登陆这些机器一遍一遍的执行这些命令。&lt;/p&gt;
&lt;p&gt;你也可以根据你自己的需求，执行一些命令在特定的目标群组上。参考-G 参数，从官网文档中获取更多细节http://saltstack.org&lt;/p&gt;
&lt;p&gt;从此以后你不需要再登陆minion，所有的配置和执行能够快速高效的远程执行。&lt;/p&gt;
&lt;p&gt;既然你已经安装了Salt并且能够执行一些远程的命令，为什么停步于此那？&lt;/p&gt;
&lt;h2&gt;Salt的强大源自于配置管理工具&lt;/h2&gt;
&lt;p&gt;假如你之前没有使用过其他的配置管理系统，下面是一个简单的例子，比如说你有一组配置和相关的包，需要安装在每个WEB服务器上。你保留这些配置指令在一个文本文件中，然后引导你的服务器以你需要的方式安装和配置他们，每次你创建一个新的服务器。你也可以使用配置管理来保持你所有的服务器更新,一旦他们被创造和变化的反馈到新的包装或配置
安装了lib pam-crack 包，你可以有添加额外的要求用户密码。之所以选择这个包，是因为它对所有连接到因特网的服务器是有用的。它允许你设置一个额外长度的密码，并且会要求你密码中包含特殊字符或者数字，你也可以比较容易的选择特殊的包。但是这些包和例子必须在你的系统中可用。&lt;/p&gt;
&lt;h3&gt;配置指令的存储&lt;/h3&gt;
&lt;p&gt;一般来讲，Salt的配置管理指令和文件保存在/srv/salt目录下，这里存放着所有的配置文件，和一些你想要拷贝到从服务器的文件。Salt的特点之一是包含一个文件服务器。虽然Salt不会在你的主服务器创建系统文件，但是所有的配置管理发生在/srv/salt目录中。&lt;/p&gt;
&lt;p&gt;默认，Salt使用PyAMl语法(http://pyyaml.org) 作为它的模板文件的格式，但是其他很多模板语言在Salt中是可以使用的。一定要按照正确的格式书写YAML,比如它使用到两个空格代替tab。如果YAML文件出现不可预知的错误，你可以使用一个在线的debug工具(http://yaml-online-parser.appspot.com )。&lt;/p&gt;
&lt;h3&gt;启动配置管理&lt;/h3&gt;
&lt;p&gt;在启动配置管理功能之前，你需要再一次编辑你的master配置文件，在/etc/salt下。打开master配置文件，找到file_roots行，缺省配置文件中，这一行在第156行。现在，取消注释即删除#号，配置如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;file_roots&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/s&lt;/span&gt;&lt;span class="n"&gt;alt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样子就可以告诉Salt你的配置管理文件在哪里。根据你是如何安装Salt，有时你需要自己创建/srv/salt目录&lt;/p&gt;
&lt;h3&gt;创建一个Top文件/Roadmap&lt;/h3&gt;
&lt;p&gt;基础配置文件也叫做Top文件，在/srv/salt目录下。我们来创建这个文件。这个文件提供了其它文件的映射。可以用于作为其它服务器的基础配置文件。再次使用你最喜欢的编辑器，在/srv/salt目录创建一个top.sls文件。你可以把它作为指向不同目录的路线图。在top.sls中加入一下行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base:
  &amp;#39;*&amp;#39;:
    - servers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;base语法告诉Salt这是基础配置文件，可以应用在所有机器上。通配符’*‘的目标是所有机器。’- servers’指令可以是任意值，运行你识别哪些质量可以使用。再选择一些其它有用的配置。这个条目还指向一个特别的配置，用于安装libpam-cracklib。&lt;/p&gt;
&lt;h3&gt;创建一个特定服务器的配置文件&lt;/h3&gt;
&lt;p&gt;保存top.sls后，在/srv/salt目录下创建servers.sls文件。这个文件包含特定的配置，包括安装包的名称，也可指向另外的配置文件。在servers.sls中，加入如下行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;libpam-cracklib:
  pkg:
    - installed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一行是包管理工具可识别的软件包名称。以Apache HTTP server为例，在基于apatitude的包管理中叫做apache2，而在基于yum的包管理中叫做httpd。确保针对包管理工具使用正确的名字。也可以使用Salt的grains进行包管理。查看参考文档以获得更多信息，以及在SLS文件使用grains的例子(http://salt.readthedocs.org/en/latest/topics/tutorials/states_pt3.html#using-grains-in-sls-modules).&lt;/p&gt;
&lt;p&gt;第2和第3行告诉Salt如何处理这个包——本例是安装这个包。要删除一个包，你只需要修改’- installed’为’- removed’即可。记住，空格很重要！第二行’pkg:‘前有两个空格，第三行’- installed’前有四个空格。如果遇到任何错误，请通过在线YAML解析器检查语法。&lt;/p&gt;
&lt;h3&gt;特定包的配置文件&lt;/h3&gt;
&lt;p&gt;安装libpam-cracklib包，你仅仅需要写三行配置即可。到此时的话，默认包管理器会安装libpam-cracklib包。然后您将需要登录到计算机上安装和配置它为您的特定需求。即使安装失败，Salt也会提供一个好的方案来解决。&lt;/p&gt;
&lt;p&gt;Salt作为一个安全文件服务器，并把文件拷贝到远程的从服务器上。在servers.sls增加如下行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/pam.d/common-password:
  file:
    - managed
    - source: salt://servers/common-password
    - require:
      - pkg: libpam-cracklib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意第四行，它告诉Salt你的特殊文件的位置，这一行后面的行，即第5行，告诉Salt这个包的依赖包。
这行salt://映射到你的主服务器/srv/salt目录。&lt;/p&gt;
&lt;p&gt;保存了server.sls文件后，在/srv/salt 目录下创建servers目录。这里用来存储libpam-cracklib包的配置文件。&lt;/p&gt;
&lt;p&gt;当你在安装软件和配置文件的时，有时候你想要在测试服务器上先行安装，然后以你的需要配置。你可以拷贝配置文件到/srv/salt目录，这样子，你可以在部署到生成环境之前测试他们。
现在你的配置测试通过，现在你可以把配置文件随着安装libpam-cracklib 分发到每天从机器上了。/srv/salt 目录应该如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/srv/salt
    top.sls
    servers.sls
    /servers
       common-password
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里我把libpam-cracklib的配置作为一个例子，所有的其他软件配置都和这样差不多。例如，你可以比较容易的通过修改httpd.conf 来实现虚拟主机和主机头的配置。&lt;/p&gt;
&lt;p&gt;所有的sls文件准备好以后，最后一步是告诉Salt配置远程机器。state.highstate 是触发这些同步的命令。使用先前的语法格式，目标位所有机器，键入以下格式的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo salt &amp;#39;*&amp;#39; state.highstate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;片刻后，从服务会反馈像如下成功的信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;
  State: - pkg
  Name:      libpam-cracklib
  Function:  installed
      Result:    True
      Comment:   Package libpam-cracklib installed
      Changes:   wamerican: {&amp;#39;new&amp;#39;: &amp;#39;7.1-1&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
                 cracklib-runtime: {&amp;#39;new&amp;#39;: &amp;#39;2.8.18-3build1&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
                 libcrack2: {&amp;#39;new&amp;#39;: &amp;#39;2.8.18-3build1&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}
                 libpam-cracklib: {&amp;#39;new&amp;#39;: &amp;#39;1.1.3-7ubuntu2&amp;#39;, &amp;#39;old&amp;#39;: &amp;#39;&amp;#39;}

----------
  State: - file
  Name:      /etc/pam.d/common-password
  Function:  managed
      Result:    True
      Comment:   File /etc/pam.d/common-password updated
      Changes:   diff: ---
+++
@@ -22,7 +22,7 @@
 # pam-auth-update(8) for details.

 # here are the per-package modules (the &amp;quot;Primary&amp;quot; block)
-password   requisite   pam_cracklib.so retry=3 minlen=8 difok=3
+password   requisite   pam_cracklib.so retry=3 minlen=14 difok=3 dcredit=1 ucredit=1 lcredit=1 ocredit=1
 password   [success=1 default=ignore]   pam_unix.so obscure use_authtok try_first_pass sha512
 # here&amp;#39;s the fallback if no module succeeds
 password   requisite   pam_deny.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如你所见，Salt成功安装了libpam-cracklib并且从主服务器下载了一个common-password到从服务器的/etc/pam.d/ 目录。&lt;/p&gt;
&lt;p&gt;本例中只有一台从服务器，相对来说是一个简单的例子，但是想象一下，假如你使用Salt配置管理安装了LAMP web服务器，你省了多长时间呀。把这些配置放在文本文件中，使得你快速高效的创建同样的服务器。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;现在你有能力一次在很多台机器上执行远程命令并且能够把配置文件存储在易维护的文本中。也可以安装特殊的软件包。&lt;/p&gt;
&lt;p&gt;刚开始的时候，多花点心思。您可以根据自己的特定配置创建一个或多个服务器，并且下载不同的包到每台机器上。Salt 也可以不按顺序执行，有些命令会同时执行，假如其中一台执行失败，其他依然不受影响继续执行。&lt;/p&gt;
&lt;p&gt;虽然在安装Salt比较费时，但是你以后会得到极大的好处，特别是可以让你创建特定的服务器和可重复使用的配置。&lt;/p&gt;
&lt;p&gt;访问Salt项目得到更多的细节，多关注邮件列表和用户文档以及一些例子。你会发现社区会非常热心的帮助你处理问题。&lt;/p&gt;</summary><category term="SaltStack"></category><category term="入门"></category></entry><entry><title>Salt整合reclass测试</title><link href="/kb/reclass-salt-01/" rel="alternate"></link><updated>2014-02-17T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:,2014-02-17:kb/reclass-salt-01/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/reclass-salt-01.html"&gt;http://pengyao.org/reclass-salt-01.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="reclass"&gt;
&lt;h2&gt;reclass基本介绍&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;项目地址: &lt;a class="reference external" href="https://github.com/madduck/reclass/tree"&gt;https://github.com/madduck/reclass/tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手册地址: &lt;a class="reference external" href="http://reclass.pantsfullofunix.net/index.html"&gt;http://reclass.pantsfullofunix.net/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reclass, 全称Recursive External Node Classification, 可以与自动化管理工具结合, 为其提供ENC服务. reclass作者认为, ENC软件应该提供如下两个功能:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;提供组(group)中节点(node)及组关系(group memberships)的信息&lt;/li&gt;
&lt;li&gt;提供节点指定的信息, 如变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对此, reclass定义了如下四种元素:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="84%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;元素&lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;一个节点, 通常是一个计算机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;一个分类(categroy),tag,特性(feature)或角色(role), 支持嵌套和继承&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;一组行为(behaviour)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;parameter&lt;/td&gt;
&lt;td&gt;节点指定的变量,可以通过class进行继承&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;reclass在继承中, 如果parent中变量不存在, 则新增,如果存在同一变量, 类型为字符串, 则会进行覆盖. 如果变量为list类型, 则进行追加&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;reclass安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/madduck/reclass.git
&lt;span class="nb"&gt;cd&lt;/span&gt; reclass
python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;reclass配置及测试&lt;/h2&gt;
&lt;p&gt;测试目标: 通过reclass实现ntp变量的灵活扩展&lt;/p&gt;
&lt;p&gt;通用信息, &lt;em&gt;/srv/reclass/classes/ntp-common.yml&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpserver&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.asia.pool.ntp.org&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.asia.pool.ntp.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redhat系统继承ntp-common并进行一些特殊定制, &lt;em&gt;/srv/reclass/classes/ntp-redhat.yml&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;classes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-common&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpd&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpserver&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.asia.pool.ntp.org&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.asia.pool.ntp.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置node, &lt;em&gt;/srv/reclass/nodes/salt-minion-01.yml&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;classes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-redhat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试节点分类信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reclass -b /srv/reclass --nodeinfo salt-minion-01
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;__reclass__&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-01&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-01&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;timestamp&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Mon Feb 17 09:29:53 2014&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;uri&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yaml_fs:///srv/reclass/nodes/salt-minion-01.yml&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;applications&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;classes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-common&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-redhat&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;environment&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;parameters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpserver&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.asia.pool.ntp.org&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.asia.pool.ntp.org&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.asia.pool.ntp.org&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.asia.pool.ntp.org&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从输出结果看, 与reclass手册描述一致&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reclasssalt"&gt;
&lt;h2&gt;reclass与salt整合测试&lt;/h2&gt;
&lt;p&gt;Salt在0.17版本中,增加了 &lt;a class="reference external" href="http://docs.saltstack.com/ref/tops/all/salt.tops.reclass_adapter.html"&gt;reclass的支持&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Salt与reclass元素对应关系&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="43%" /&gt;
&lt;col width="57%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;reclass元素&lt;/td&gt;
&lt;td&gt;Salt术语&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;nodes&lt;/td&gt;
&lt;td&gt;hosts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;classes&lt;/td&gt;
&lt;td&gt;(none)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;applications&lt;/td&gt;
&lt;td&gt;states&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;parameters&lt;/td&gt;
&lt;td&gt;pillar&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;测试目标: 通过reclass为salt minion提供对应的ntp pillar信息&lt;/p&gt;
&lt;p&gt;测试环境: Salt Master/Minion结构, 版本0.17.5&lt;/p&gt;
&lt;p&gt;配置salt master, &lt;em&gt;/etc/salt/master&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;reclass&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;reclass&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;storage_type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yaml_fs&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;inventory_base_uri&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/reclass&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master_tops&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;reclass&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*reclass&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ext_pillar&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;reclass&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*reclass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启salt master&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service salt-master restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试salt-minion-01对应的ntp pillar&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;salt-minion-01&amp;#39;&lt;/span&gt; pillar.item ntp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-01&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;----------&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;----------&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpserver&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.asia.pool.ntp.org&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.asia.pool.ntp.org&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.asia.pool.ntp.org&lt;/span&gt;
            &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.asia.pool.ntp.org&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;service&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;达成测试目标&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;salt pillar当前较弱, 只支持include, 并不支持extend等更高级的功能. 通过与reclass的整合, 借助reclass灵活的继承功能(支持多级继承), 为Salt提供专业的ENC服务, 弥补了pillar的不足.&lt;/p&gt;
&lt;p&gt;当前reclass的功能相对较弱, 不过可以看到的是如Class subdirectories这类实用的功能已经在to-do list中, 期待reclass功能更为强大.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>Salt配置复杂nodegroup</title><link href="/kb/salt-nodegroup-complex/" rel="alternate"></link><updated>2014-01-16T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:,2014-01-16:kb/salt-nodegroup-complex/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/salt-nodegroup-complex.html"&gt;http://pengyao.org/salt-nodegroup-complex.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;昨天拉风在群里问, 定义了A, B两个nodegroup,  是否可以定义一个nodegroup C, 包含A, B两个group, 实现nodegroup嵌套nodegroup进而实现复杂nodegroup(哈哈,各种绕口)&lt;/p&gt;
&lt;p&gt;由于手册中并没有相关介绍, 就查询了下官方的issue, 找到了之前有人反馈过的 &lt;a class="reference external" href="https://github.com/saltstack/salt/issues/2020"&gt;issue #2020&lt;/a&gt; , tom说0.10.4已经实现了这个功能, 就在测试环境进行了测试:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/etc/salt/master.d/nodegroups.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;nodegroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test1&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;L@salt-minion-01&amp;#39;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test2&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;L@salt-minion-02&amp;#39;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;N@test1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;or&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;N@test2’&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt -N &lt;span class="nb"&gt;test&lt;/span&gt; test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-01&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-02&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从输出来看, nodegroup嵌套是支持的&lt;/p&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>基于SaltStack完成LVS的配置管理</title><link href="/kb/howto_configure_linux_virtual_server_using_saltstack/" rel="alternate"></link><updated>2013-11-24T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:,2013-11-24:kb/howto_configure_linux_virtual_server_using_saltstack/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/howto_configure_linux_virtual_server_using_saltstack.html"&gt;http://pengyao.org/howto_configure_linux_virtual_server_using_saltstack.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前由于工作需求，编写了SaltStack的 &lt;a class="reference external" href="https://github.com/pengyao/salt/blob/develop/salt/modules/lvs.py"&gt;LVS远程执行模块&lt;/a&gt;  , &lt;a class="reference external" href="https://github.com/pengyao/salt/blob/develop/salt/states/lvs_service.py"&gt;LVS service状态管理模块&lt;/a&gt; 及 &lt;a class="reference external" href="https://github.com/pengyao/salt/blob/develop/salt/states/lvs_server.py"&gt;LVS server状态管理模块&lt;/a&gt; ,并 &lt;a class="reference external" href="https://github.com/saltstack/salt/pull/8741"&gt;提交给了SaltStack官方&lt;/a&gt;,现已合并至官方代码中，本文将描述如何基于SaltStack完成LVS Loadblance(DR)及RealServer的配置管理.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/justlinux2010/article/details/8539205"&gt;LVS-DR模式配置详解&lt;/a&gt; ,需要注意的是，LVS-DR方式工作在数据链路层，文中描述需要开启ip_forward,其实没有必要, 详情见 &lt;a class="reference external" href="http://zh.linuxvirtualserver.org/node/2585"&gt;LVS DR模式原理剖析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;三台服务器用于LVS集群，其中主机名为lvs的担当的角色为loadblance，对应的IP地址为192.168.36.10；主机名为web-01和web-02的主机担当的角色为RealServer, 对应的IP地址分别为192.168.36.11及192.168.36.12&lt;/li&gt;
&lt;li&gt;LVS VIP: 192.168.36.33, Port: 80, VIP绑定在lvs的eth1口&lt;/li&gt;
&lt;li&gt;最最重要的是loadblance主机为Linux，并已安装ipvsadm, Windows/Unix等主机的同学请绕过吧，这不是我的错......&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下所有操作均在Master上进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saltstack-lvs"&gt;
&lt;h3&gt;配置SaltStack LVS模块&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果使用的Salt版本已经包含了lvs模块，请忽略本节内容，测试方法:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt; cmd.run &lt;span class="s2"&gt;&amp;quot;python -c &amp;#39;import salt.modules.lvs&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果输出有 &lt;em&gt;ImportError&lt;/em&gt; 字样，则表示模块没有安装，需要进行如下操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; -d /srv/salt/_modules &lt;span class="o"&gt;||&lt;/span&gt; mkdir /srv/salt/_modules
&lt;span class="nb"&gt;test&lt;/span&gt; -d /srv/salt/_states &lt;span class="o"&gt;||&lt;/span&gt; mkdir /srv/salt/_states
wget https://raw.github.com/saltstack/salt/develop/salt/modules/lvs.py -O /srv/salt/_modules/lvs.py
wget https://raw.github.com/saltstack/salt/develop/salt/states/lvs_service.py -O /srv/salt/_states/lvs_service.py
wget https://raw.github.com/saltstack/salt/develop/salt/states/lvs_server.py -O /srv/salt/_states/lvs_server.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar"&gt;
&lt;h3&gt;配置pillar&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;/srv/pillar/lvs/loadblance.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs-loadblance&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvstest&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;vip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.33&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;vip-nic&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth1&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;protocol&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tcp&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scheduler&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;wlc&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;realservers&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web-01&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.11&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;packet_forward_method&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dr&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;weight&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;web-02&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.12&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;port&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;packet_forward_method&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dr&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;weight&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/pillar/lvs/realserver.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs-realserver&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvstest&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;vip&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.33&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/pillar/top.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.loadblance&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;web-0*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.realserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="states"&gt;
&lt;h3&gt;编写States&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/lvs/loadblance.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# config lvs&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lvs-loadblance&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lvs-loadblance&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;# config lvs vip&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-vip:&lt;/span&gt;
&lt;span class="x"&gt;  network.managed:&lt;/span&gt;
&lt;span class="x"&gt;    - name: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip-nic&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - enable: True&lt;/span&gt;
&lt;span class="x"&gt;    - type: eth&lt;/span&gt;
&lt;span class="x"&gt;    - proto: none&lt;/span&gt;
&lt;span class="x"&gt;    - ipaddr: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - netmask: 255.255.255.255&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;service_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-service:&lt;/span&gt;
&lt;span class="x"&gt;  lvs_service.present:&lt;/span&gt;
&lt;span class="x"&gt;    - protocol: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;protocol&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - service_address: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;service_address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - scheduler: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each_rs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;realservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;server_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-server:&lt;/span&gt;
&lt;span class="x"&gt;  lvs_server.present:&lt;/span&gt;
&lt;span class="x"&gt;    - protocol: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;protocol&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - service_address: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;service_address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - server_address: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;server_address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - packet_forward_method: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;packet_forward_method&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - weight: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/lvs/realserver.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# ignore arp&lt;/span&gt;
&lt;span class="x"&gt;net.ipv4.conf.all.arp_ignore:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 1&lt;/span&gt;

&lt;span class="x"&gt;net.ipv4.conf.lo.arp_ignore:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 1&lt;/span&gt;

&lt;span class="x"&gt;net.ipv4.conf.all.arp_announce:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 2&lt;/span&gt;

&lt;span class="x"&gt;net.ipv4.conf.lo.arp_announce:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 2&lt;/span&gt;


&lt;span class="x"&gt;# config lvs vip&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lvs-realserver&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lvs-realserver&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;lvs-vip:&lt;/span&gt;
&lt;span class="x"&gt;  network.managed:&lt;/span&gt;
&lt;span class="x"&gt;    - name: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lo&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - enable: True&lt;/span&gt;
&lt;span class="x"&gt;    - type: eth&lt;/span&gt;
&lt;span class="x"&gt;    - proto: none&lt;/span&gt;
&lt;span class="x"&gt;    - ipaddr: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    - netmask: 255.255.255.255&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;/srv/salt/top.sls*&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.loadblance&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;web-0*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.realserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;应用配置&lt;/h3&gt;
&lt;p&gt;如果之前进行 &lt;em&gt;配置LVS模块&lt;/em&gt; 的操作，需要进行同步模块的操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;lvs*&amp;#39;&lt;/span&gt; saltutil.sync_all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用LVS配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; state.highstate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看LVS当前状态:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt; lvs.list
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;通过SaltStack LVS模块，可以快速的查询LVS状态，执行LVS常用指令及完成LVS的配置管理。如有需要调整RealServer规则或添加新的RealServer, 只需要修改 &lt;em&gt;/srv/pillar/lvs/loadblance.sls&lt;/em&gt; ，然后应用配置即可.&lt;/p&gt;
&lt;p&gt;本文中所用到的代码已经上传至github，传送门: &lt;a class="reference external" href="https://github.com/pengyao/salt-lvs"&gt;https://github.com/pengyao/salt-lvs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>基于Salt Master/Minions快速构建Salt SSH环境</title><link href="/kb/howto_setup_salt_ssh_from_minion/" rel="alternate"></link><updated>2013-11-08T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:,2013-11-08:kb/howto_setup_salt_ssh_from_minion/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/howto_setup_salt_ssh_from_minion.html"&gt;http://pengyao.org/howto_setup_salt_ssh_from_minion.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Salt 0.17版本已发布，该版本中重要的特性是引入了Salt SSH系统，提供了无需Minion、基于SSH的维护方式。原有的Salt维护环境已经初具规模，再手动重新构建Salt SSH环境成本较高。偷懒是人的天性，利用原有SaltStack Master/Minions环境，如何快速构建新的Salt SSH维护环境将是本文的主题.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;p&gt;预则立，不预则废。阅读本文前先阅读如下文章:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Salt 0.17 Release Note: &lt;a class="reference external" href="http://docs.saltstack.com/topics/releases/0.17.0.html"&gt;http://docs.saltstack.com/topics/releases/0.17.0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Salt SSH: &lt;a class="reference external" href="http://docs.saltstack.com/topics/ssh/"&gt;http://docs.saltstack.com/topics/ssh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Salt Rosters: &lt;a class="reference external" href="http://docs.saltstack.com/topics/ssh/roster.html"&gt;http://docs.saltstack.com/topics/ssh/roster.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Minion版本: 本文会采用 &lt;a class="reference external" href="http://docs.saltstack.com/topics/mine/"&gt;Salt Mine&lt;/a&gt; 获取已有的Minion ID及IP地址，由于Salt Mine为0.15.0引入的新功能，所以需要保证Minion的版本等于或高于0.15.0&lt;/li&gt;
&lt;li&gt;Master的安装采用EPEL仓库yum方式&lt;/li&gt;
&lt;li&gt;所有minion端sshd服务已启动，并允许Master访问&lt;/li&gt;
&lt;li&gt;Master所在服务器上同时安装有Minion并运行Master进行管理, 对应的Minion ID为 &lt;em&gt;salt&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Salt file_roots目录为 &lt;em&gt;/srv/salt/&lt;/em&gt; , pillar_roots目录为 &lt;em&gt;/srv/pillar/&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下所有操作在Master端进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-sshkey"&gt;
&lt;h3&gt;创建用于Salt SSH环境的用户及key认证管理环境&lt;/h3&gt;
&lt;p&gt;生成Master SSH key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## 创建master ssh key目录&lt;/span&gt;
mkdir /etc/salt/pki/master/ssh/
&lt;span class="c1"&gt;## 生成Master SSH key&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/salt/pki/master/ssh/
ssh-keygen -t rsa -P &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; -f salt-ssh.rsa
&lt;span class="c1"&gt;## 复制master public key至 salt fileserver&lt;/span&gt;
cp /etc/salt/pki/master/ssh/salt-ssh.rsa.pub /srv/salt/salt/files/salt-ssh.rsa.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编写用于Salt SSH管理的用户及key认证状态管理文件, &lt;em&gt;/srv/salt/salt/ssh/init.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;# salt user #}&lt;/span&gt;
  &lt;span class="nv"&gt;user.present&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;- name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;# salt user sudoer #}&lt;/span&gt;
  &lt;span class="nv"&gt;file.managed&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;- name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;/etc/sudoers.d/salt&lt;/span&gt;
    &lt;span class="nv"&gt;- source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//salt/files/etc/sudoers.d/salt&lt;/span&gt;
    &lt;span class="nv"&gt;- require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="nv"&gt;- user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;salt-user&lt;/span&gt;

&lt;span class="nv"&gt;salt-master-key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="nv"&gt;ssh_auth.present&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;- user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt;
    &lt;span class="nv"&gt;- source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//salt/files/salt-ssh.rsa.pub&lt;/span&gt;
    &lt;span class="nv"&gt;- require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="nv"&gt;- user&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;salt-user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;salt&lt;/em&gt; 用户对应的sudoer文件 &lt;em&gt;/srv/salt/salt/files/etc/sudoers.d/salt&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Defaults:salt !requiretty
salt ALL=(ALL) NOPASSWD: ALL
&lt;/pre&gt;
&lt;p&gt;应用状态&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; state.sls salt.ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mine-minion-idip"&gt;
&lt;h3&gt;配置Mine,以获取Minion id及IP地址&lt;/h3&gt;
&lt;p&gt;配置Salt Mine, &lt;em&gt;/srv/pillar/salt/mine.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mine_functions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置pillar top.sls, &lt;em&gt;/srv/pillar/top.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt.mine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刷新Pillar，并验证Salt Mine配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; saltutil.refresh_pillar
salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; pillar.get mine_functions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新Salt Mine，并测试获取所有Minions的ID及IP&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; mine.update
salt &lt;span class="s1"&gt;&amp;#39;salt&amp;#39;&lt;/span&gt; mine.get &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; network.ip_addrs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-rosters"&gt;
&lt;h3&gt;生成Salt Rosters&lt;/h3&gt;
&lt;p&gt;配置Salt Rosters state&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/salt/ssh/roster.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-rosters&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;# salt rosters file for salt-ssh #}&lt;/span&gt;
  &lt;span class="nv"&gt;file.managed&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;- name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;/etc/salt/roster&lt;/span&gt;
    &lt;span class="nv"&gt;- source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//salt/files/etc/salt/roster&lt;/span&gt;
    &lt;span class="nv"&gt;- template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;jinja&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/salt/files/etc/salt/roster&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for eachminion, each_mine in salt['mine.get']('*', 'network.ip_addrs').iteritems() -%}
{{eachminion}}:
  host: {{each_mine[0]}}
  user: salt
  sudo: True
{% endfor -%}
&lt;/pre&gt;
&lt;p&gt;生成Salt Rosters&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;salt&amp;#39;&lt;/span&gt; state.sls salt.ssh.roster
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-ssh"&gt;
&lt;h3&gt;应用Salt SSH&lt;/h3&gt;
&lt;p&gt;将Master升级至0.17及以上版本(EPEL Stable当前版本为已经为0.17.1-1), 至此, Salt SSH环境已经构建完毕&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum update salt-master
service salt-master restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试Salt SSH&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## 运行Salt Module&lt;/span&gt;
salt-ssh &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; test.ping
&lt;span class="c1"&gt;## 运行原始SHELL命令&lt;/span&gt;
salt-ssh &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; -r &lt;span class="s1"&gt;&amp;#39;uptime&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;后话&lt;/h2&gt;
&lt;p&gt;Salt这是要抢 &lt;a class="reference external" href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt; 饭碗的节奏啊，个人更喜欢Salt Master/Minions这样的管理方式，Salt SSH作为补充，用于升级Minion、重启Minion等等自维护工作还是很靠谱的。有了Salt SSH，再也不用担心是先有鸡还是先有蛋的问题了.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry><entry><title>【翻译】在SaltStack中使用Pillar</title><link href="/kb/using_pillar_data_in_saltstack/" rel="alternate"></link><updated>2013-04-19T00:00:00+08:00</updated><author><name>cssug</name></author><id>tag:,2013-04-19:kb/using_pillar_data_in_saltstack/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;原文出处: &lt;a href="http://pengyao.org/using_pillar_data_in_saltstack.html"&gt;http://pengyao.org/using_pillar_data_in_saltstack.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;英文原文: &lt;a href="http://intothesaltmine.org/blog/html/2013/02/28/using_pillar_data_in_saltstack.html"&gt;http://intothesaltmine.org/blog/html/2013/02/28/using_pillar_data_in_saltstack.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者: &lt;a href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pillar做为一允许你分发定义的全局数据到目标minion上的接口，Pillar的数据只在匹配的minions上有效。 所以该特性使Pillar常常用于存储敏感类数据.&lt;/p&gt;
&lt;p&gt;本文通过例子带你了解如何使用和存储Pillar数据.&lt;/p&gt;
&lt;h2&gt;/etc/salt/master - Pillar Roots&lt;/h2&gt;
&lt;p&gt;需要在master配置文件中定义&lt;em&gt;pillar_roots&lt;/em&gt;，其用来指定Pillar data存储在哪个目录,默认是&lt;em&gt;/srv/pillar&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pillar_root&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/srv/&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;/srv/pillar/top.sls&lt;/h2&gt;
&lt;p&gt;和State系统一样，需要先定义一个&lt;em&gt;top.sls&lt;/em&gt;文件作为入口，用来指定数据对哪个minion有效.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base:
  &amp;#39;*&amp;#39;:
    - packages
  &amp;#39;alpha&amp;#39;:
    - database
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上边的例子定义了&lt;em&gt;packages&lt;/em&gt;对所有的minion有效，&lt;em&gt;database&lt;/em&gt;只对名字为'alpha'的minion有效.&lt;/p&gt;
&lt;h2&gt;/srv/pillar/packages.sls - Pillar Data&lt;/h2&gt;
&lt;p&gt;通过例子&lt;em&gt;packages&lt;/em&gt;文件定义不同Linux发行版的软件包名字，通过Pillar进行中心控制它们，这样就可以在State文件中引用Pillar数据使State看起来更简单.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;RedHat&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;apache: httpd&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;grains&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Debian&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;apache: apache2&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;/srv/states/apache.sls - State Data&lt;/h2&gt;
&lt;p&gt;如上，在State文件中将可以引用Pillar数据，是State更为简单. 线面是&lt;em&gt;apache.sls&lt;/em&gt; State文件例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apache&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;/srv/pillar/database.sls - Pillar Data&lt;/h2&gt;
&lt;p&gt;另一个定义Pillar Data的例子是定义服务连接数据库的权限的配置参数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dbname&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;
&lt;span class="n"&gt;dbuser&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;
&lt;span class="n"&gt;dbpass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
&lt;span class="n"&gt;dbhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;website.conf - template&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;// MySQL settings&lt;/span&gt;
&lt;span class="x"&gt;define(&amp;#39;DB_NAME&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbname&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;// MySQL database username&lt;/span&gt;
&lt;span class="x"&gt;define(&amp;#39;DB_USER&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbuser&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;// MySQL database password&lt;/span&gt;
&lt;span class="x"&gt;define(&amp;#39;DB_PASSWORD&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbpass&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;// MySQL hostname&lt;/span&gt;
&lt;span class="x"&gt;define(&amp;#39;DB_HOST&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dbhost&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;有许多方法使用Pillar data. 作为另一种基础数据结构，Pillar是优美的. 可以用它定义所有minion上的自定义数据，也可以简单的定义包的名字，或者定义服务凭据(service credentials)，Pillar都可以满足.&lt;/p&gt;</summary><category term="SaltStack"></category><category term="进阶"></category></entry></feed>