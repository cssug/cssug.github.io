<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>中国SaltStack用户组</title><link href="http://www.saltstack.cn/" rel="alternate"></link><link href="http://www.saltstack.cn/feeds/saltstack.atom.xml" rel="self"></link><id>http://www.saltstack.cn/</id><updated>2014-09-06T00:00:00+08:00</updated><entry><title>Salt中ZeroMQ那点事</title><link href="http://www.saltstack.cn/saltstack/salt-zeromq-01/" rel="alternate"></link><updated>2014-09-06T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:www.saltstack.cn,2014-09-06:saltstack/salt-zeromq-01/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://pengyao.org/salt-zeromq-01.html"&gt;http://pengyao.org/salt-zeromq-01.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基本简介&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 底层网络架构采用 &lt;a class="reference external" href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; 进行实现(2014.1及之前版本, 从2014.7起, Salt新增 &lt;a class="reference external" href="https://github.com/saltstack/raet"&gt;RAET&lt;/a&gt; ), &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/index.html#building-on-proven-technology"&gt;官方手册&lt;/a&gt; 有简短描述. 那么今天就一窥在Salt内部使用了哪些 &lt;a class="reference external" href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; pattern? 各个组件间又是如何协作的哪?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zguide.zeromq.org/page:all#Chapter-Sockets-and-Patterns"&gt;0MQ - The Guide: Sockets and Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CentOS6.4&lt;/li&gt;
&lt;li&gt;Salt &lt;a class="reference external" href="https://github.com/saltstack/salt/tree/v2014.1.10/salt"&gt;2014.1.10&lt;/a&gt; ,默认配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="saltzeromq-patterns"&gt;
&lt;h2&gt;Salt中的ZeroMQ patterns&lt;/h2&gt;
&lt;div class="section" id="salt-master"&gt;
&lt;h3&gt;Salt Master&lt;/h3&gt;
&lt;p&gt;Salt Master为Salt中心管控节点. 为Salt环境提供命令下发, 文件, 结果收集等服务.&lt;/p&gt;
&lt;p&gt;在Master启动时, 首先启动名为 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L452"&gt;ReqServer&lt;/a&gt; , &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L584"&gt;ReqServer在初始化&lt;/a&gt; 时, 立即创建如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;clients&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.ROUTER&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp://0.0.0.0:4506"&gt;tcp://0.0.0.0:4506&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master Ret接口, 支持认证(auth), 文件服务, 结果收集等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;workers&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.DEALER&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/workers.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master任务处理进程接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时clients与workers, 建立了一个 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L635"&gt;zeromq.device&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QUEUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过zmq.device, 实现了clients接收到请求后, 转发到workers进程接口上进行处理&lt;/p&gt;
&lt;p&gt;接下来, Master会启动 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L635"&gt;Publisher&lt;/a&gt; , 立即创建了如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;pub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUB&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp://0.0.0.0:4505"&gt;tcp://0.0.0.0:4505&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master pub接口, 提供远程执行命令发送功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pull&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PULL&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/publish_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master远程执行命令pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;pull接口在接收到数据后, 会将数据从pub接口上进行发送:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pull_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pub_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来, Master启动 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/utils/event.py#L430"&gt;EventPublisher&lt;/a&gt;, 以实现Event BUS, 创建了如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;epub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUB&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/master_event_pub.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master event pub接口, 以方便其他或第三方应用订阅event bus上的event&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;epull&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PULL&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/master_event_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master event pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时epull接口在收到包时, 会将数据在pub接口上进行发送:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epull_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epub_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在启动EventPublisher之后, Salt Master会继续启动Halite, Reactor系统, 该部分暂不描述. 随后, Salt会启动多个Work进程(默认是5, 在规模较大的环境中, 建议增加配置文件中的 &lt;em&gt;worker_threads&lt;/em&gt; 数目来增加该类进程)来进行任务处理, 每个Worker进程会创建如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.REP&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/workers.ipc&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: Salt Master任务处理进程, 处理验证Minion, 获取Master配置, Mine, pillar, fileserver文件获取, minion event fire到master的event接口, 收集minions的返回结果等任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-minion"&gt;
&lt;h3&gt;Salt Minion&lt;/h3&gt;
&lt;p&gt;Salt Minion为Salt环境操作节点, 远程命令从Master发送过来后, 会在该主机上进行执行并将结果返回给Master.&lt;/p&gt;
&lt;p&gt;Salt &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/minion.py#L524"&gt;Minion&lt;/a&gt; 在启动时从配置文件中获取Master的地址, 如果为域名, 则进行解析. 解析完毕后, 会连接Master的Ret接口进行key认证. 认证通过, 会获取到master的 &lt;em&gt;publish_port&lt;/em&gt; , 这就是为什么在Minion的配置文件中只需要指定Minion的 &lt;em&gt;ret_port&lt;/em&gt; (对应minion配置文件中的master_port) 即可.&lt;/p&gt;
&lt;p&gt;在获取到master的publish_port(默认为4505)之后, 会建立minion本地的Event接口:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;epub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUB&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/minion/minion_event_{id_hash}_pub.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Minion event pub接口, 以便其他或第三方应用通过该event bus获取event信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;epull&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PULL&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/minion/minion_event_{id_hash}_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Minion event pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;epull接口在接收到数据后, 会检查是否需要处理, 如果需要处理, 则进行执行. 随后将该数据包传送到epub接口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Check the event system&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epull_sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLLIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epull_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NOBLOCK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Handling event &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grains_cache&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grains_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fire_master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                 &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MinionEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Forwarding master event tag={tag}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fire_master&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;events&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pretag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epub_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Exception while handling events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在event接口建立完毕后, 会建立如下ZeroMQ pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.SUB&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp:/"&gt;tcp:/&lt;/a&gt;/{master_ip}:4505&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 订阅来自Master pub接口的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于远程执行命令的发送, 是通过ZeroMQ PUB/SUB pattern进行建立的, 即当master下发操作指令时, 所有的minion均可以接收到, 然后minion会检查本机是否target match, 如果match, 则进行执行.执行完毕后, 会通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/payload.py#L159"&gt;SREQ&lt;/a&gt; 发送到Master的Ret接口, 期间会创建如下ZeroMQ pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.REQ&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp:/"&gt;tcp:/&lt;/a&gt;/{master_ip}:4506&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 将执行结果发送给Master&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多关于Minion如何来执行任务, 请访问: &lt;a class="reference external" href="http://devopstarter.info/yuan-ma-jie-du-saltstackyun-xing-ji-zhi-zhi-job-runtime/"&gt;http://devopstarter.info/yuan-ma-jie-du-saltstackyun-xing-ji-zhi-zhi-job-runtime/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="salt"&gt;
&lt;h3&gt;Salt&lt;/h3&gt;
&lt;p&gt;Salt Master与Salt Minion建立了对应的ZeroMQ pattern, 那么当一个远程执行指令下发下去, 其数据流向是怎么个流程哪? 以执行test.ping为例:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在master端bash下, 执行:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其对应的 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/scripts.py#L126"&gt;python执行&lt;/a&gt; 是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaltCMD&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在内部, 又是调用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cmd_fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_cli&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;full_ret&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmd_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_format_ret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_output_ret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;在 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L77"&gt;LocalClient&lt;/a&gt; 对象初始化时, 会创建用于对发送的数据进行序列化的 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L77"&gt;Serial&lt;/a&gt; 对象, 及 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/utils/event.py#L406"&gt;MasterEvent&lt;/a&gt; 对象. MasterEvent对象会创建如下ZeroMQ pattern:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;sub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.SUB&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/master_event_pub.ipc&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 用于订阅来自于Master event pub接口的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L524"&gt;cmd_cli&lt;/a&gt; 在执行时, 会首先通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L234"&gt;run_job&lt;/a&gt; 将操作指令封装成如下内容:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{'tgt_type': 'glob', 'jid': '', 'key': 'LCkViTMgqKBqb5ooG8kznznztLYPsWR1xdTYnAz9udkU9/Lla32yDvUmVKLPaUNSMtbWdBoQPIs=', 'tgt': '*', 'arg': [], 'fun': 'test.ping', 'kwargs': {'show_timeout': False}, 'cmd': 'publish', 'ret': '', 'user': 'root'}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将发送到本地master的Ret接口, 期间会创建如下ZeroMQ pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.REQ&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp://127.0.0.1:4506"&gt;tcp://127.0.0.1:4506&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 将封装后的指令发送到Master Ret接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Master Ret接口接收到3中发送的数据后, 会通过chminions.check_minions获取本次需要哪些minions执行, 并产生jid, 然后在master event接口上进行fire_event操作, 之后对数据使用master私钥(master.pem)进行签名, 然后创建如下ZeroMQ pattern:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;pub_socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUSH&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/publish_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 将指令传送到Master Pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Master Pull接口接收到数据后, 会迅速的在Master Pub接口上发送将之前收到的数据&lt;/p&gt;
&lt;p&gt;同时将jid及minions封装后的结果返回给3, 3中cmd_cli获取到数据后, 调用 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L1142"&gt;get_cli_event_returns&lt;/a&gt; ,监听Master端的Event bus, 过滤出本次任务jid所对应的event, 用来获取执行结果&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;此时Minion通过PUB/SUB, 即可收到来自于Master Pub接口的消息. Minion接收到消息后, 会首先通过本地的master pub_key(minion_master.pub)进行解密, 已确保消息来自于Master. 解密完成后, 本地进行target匹配, 如果匹配上, 表示需要执行, 派生出一个新的进程进行执行. 反之则直接忽略.&lt;/li&gt;
&lt;li&gt;Minion执行完毕后, 会通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/minion.py#L938"&gt;_return_pub&lt;/a&gt; 将封装后的结果通过AES加密发送到Master的Ret接口&lt;/li&gt;
&lt;li&gt;Master Ret接收到6中发送的数据后, 会进行AES解密, 然后通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L1354"&gt;_return&lt;/a&gt;, 首先将解密后的数据在本地event接口上进行fire_event, 并将结果存储在master本地.&lt;/li&gt;
&lt;li&gt;由于7中进行fire_event, 此时4中的get_cli_event_returns即可捕捉到, 由于采用迭代器, 每个收到的结果均能马上显示出来, 一旦捕获到的minions的结果大于等于之前获得的minions数目, 即表示所有minions均已返回结果, 退出.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Salt利用ZeroMQ灵活高效的patterns, 使Salt网络拓扑变得非常灵活高效. 利用PUB/SUB, 实现了高效的远程执行指令下发机制; 利用ROUTER/REQ, 实现认证及异步的远程执行结果返回; 利用DEALER/REP, 实现多进程任务处理机制; 利用PULL/PUB, 实现Event BUS, 使其他或第三方应用可以快速的使用PUB/SUB接收到Event BUS上的消息.&lt;/p&gt;
&lt;p&gt;I love Salt, I love ZeroMQ!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="SaltStack"></category><category term="进阶"></category></entry></feed>